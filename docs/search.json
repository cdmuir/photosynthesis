[{"path":"https://github.com/cdmuir/photosynthesis/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://github.com/cdmuir/photosynthesis/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Joseph R. Stinziano, Cassaundra Roback, Demi Gamble, Bridget Murphy, Patrick Hudson, & Christopher D. Muir Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/co2-response.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Fitting CO2 response curves","text":"Duursma R. 2015. Plantecophys - R package analysing modeling leaf gas exchange data. PLoS ONE 10:e0143346 Gu L, Pallardy SG, Tu K, Law , Wullschleger SD. 2010. Reliable estimation biochemical parameters C3 leaf photosynthesis-intercellular carbon dioxide response curves. Plant, Cell & Environment 33:1582-1874.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/hydraulic-vulnerability.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Fitting hydraulic vulnerability curves","text":"Ogle K, Barber JJ, Willson C, Thompson B. 2009. Hierarchical statistical modeling xylem vulnerability cavitation. New Phytologist 182:541-554. Pammenter NW, Van der Willigen CV. 1998. mathematical statistical analysis curves illustrating vulnerability xylem cavitation. Tree Physiology 18:589-593.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-respiration.html","id":"preferred-version-photosynthesis-2-1-1","dir":"Articles","previous_headings":"","what":"Preferred version (photosynthesis >= 2.1.1)","title":"Fit models to estimate light respiration","text":"package currently supports fitting light respiration according slope-intercept regression extension Laisk method (Laisk 1977; Walker & Ort 2015), Kok method (Kok 1956), Yin modification Kok method (Yin et al. 2009, 2011).","code":""},{"path":[]},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-respiration.html","id":"walker-ort-2015-model","dir":"Articles","previous_headings":"Preferred version (photosynthesis >= 2.1.1) > Estimate light respiration using least-squares (ls)","what":"Walker & Ort (2015) model","title":"Fit models to estimate light respiration","text":"","code":"library(broom) library(dplyr) library(photosynthesis)  acq_data = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>    read.csv()  fit = fit_photosynthesis(   .data = acq_data,   .photo_fun = \"r_light\",   .model = \"walker_ort_2015\",   .vars = list(.A = A, .Q = Qin, .C = Ci),   C_upper = 300,   # Irradiance levels used in experiment   Q_levels =  c(1500, 750, 375, 125, 100, 75, 50, 25), )  # The 'fit' object inherits class 'lm' and many methods can be used  ## Model summary: summary(fit) ##  ## Call: ## lm(formula = `(Intercept)` ~ gamma_star, data = .) ##  ## Residuals: ##       Min        1Q    Median        3Q       Max  ## -0.218920 -0.136553  0.007685  0.117016  0.249953  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept)  -0.1949     0.1002  -1.945   0.0998 .   ## gamma_star   44.3113     3.2518  13.627  9.7e-06 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.1738 on 6 degrees of freedom ## Multiple R-squared:  0.9687, Adjusted R-squared:  0.9635  ## F-statistic: 185.7 on 1 and 6 DF,  p-value: 9.698e-06 ## Estimated parameters: coef(fit) ## (Intercept)  gamma_star  ##    -0.19485    44.31131 ## 95% confidence intervals: ## n.b. these confidence intervals are not correct because the regression is fit  ## sequentially. It ignores the underlying data and uncertainty in estimates of  ## slopes and intercepts with each A-C curve. Use '.method = \"brms\"' to properly  ## calculate uncertainty.  confint(fit) ##                  2.5 %      97.5 % ## (Intercept) -0.4400221  0.05032205 ## gamma_star  36.3544139 52.26820542 ## Tidy summary table using 'broom::tidy()' tidy(fit, conf.int = TRUE, conf.level = 0.95) ## # A tibble: 2 × 7 ##   term        estimate std.error statistic    p.value conf.low conf.high ##   <chr>          <dbl>     <dbl>     <dbl>      <dbl>    <dbl>     <dbl> ## 1 (Intercept)   -0.195     0.100     -1.94 0.0998       -0.440    0.0503 ## 2 gamma_star    44.3       3.25      13.6  0.00000970   36.4     52.3 ## Calculate residual sum-of-squares sum(resid(fit)^2) ## [1] 0.1812764"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-respiration.html","id":"yin-et-al--2011-model","dir":"Articles","previous_headings":"Preferred version (photosynthesis >= 2.1.1) > Estimate light respiration using least-squares (ls)","what":"Yin et al. (2011) model","title":"Fit models to estimate light respiration","text":"","code":"library(broom) library(dplyr) library(photosynthesis)  acq_data = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>    read.csv()  fit = fit_photosynthesis(   .data = acq_data,   .photo_fun = \"r_light\",   .model = \"yin_etal_2011\",   .vars = list(.A = A, .phiPSII = PhiPS2, .Q = Qin),   Q_lower = 20,   Q_upper = 250 )  # The 'fit' object inherits class 'lm' and many methods can be used  ## Model summary: summary(fit) ##  ## Call: ## lm(formula = .A ~ x_var, data = .) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -3.8587 -0.4493  0.2041  0.7420  2.2232  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept) -0.77214    0.39419  -1.959   0.0549 .   ## x_var        0.22661    0.02739   8.274 2.13e-11 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 1.253 on 58 degrees of freedom ## Multiple R-squared:  0.5414, Adjusted R-squared:  0.5335  ## F-statistic: 68.46 on 1 and 58 DF,  p-value: 2.129e-11 ## Estimated parameters: coef(fit) ## (Intercept)       x_var  ##  -0.7721399   0.2266078 ## 95% confidence intervals: confint(fit) ##                  2.5 %     97.5 % ## (Intercept) -1.5611923 0.01691245 ## x_var        0.1717862 0.28142935 ## Tidy summary table using 'broom::tidy()' tidy(fit, conf.int = TRUE, conf.level = 0.95) ## # A tibble: 2 × 7 ##   term        estimate std.error statistic  p.value conf.low conf.high ##   <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> ## 1 (Intercept)   -0.772    0.394      -1.96 5.49e- 2   -1.56     0.0169 ## 2 x_var          0.227    0.0274      8.27 2.13e-11    0.172    0.281 ## Calculate residual sum-of-squares sum(resid(fit)^2) ## [1] 91.04856"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-respiration.html","id":"kok-1956-model","dir":"Articles","previous_headings":"Preferred version (photosynthesis >= 2.1.1) > Estimate light respiration using least-squares (ls)","what":"Kok (1956) model","title":"Fit models to estimate light respiration","text":"","code":"library(broom) library(dplyr) library(photosynthesis)  acq_data = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>    read.csv()  fit = fit_photosynthesis(   .data = acq_data,   .photo_fun = \"r_light\",   .model = \"kok_1956\",   .vars = list(.A = A, .Q = Qin),   Q_lower = 20,   Q_upper = 150 )  # The 'fit' object inherits class 'lm' and many methods can be used  ## Model summary: summary(fit) ##  ## Call: ## lm(formula = .A ~ .Q, data = .) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -4.1759 -0.4492  0.2077  0.6613  2.3544  ##  ## Coefficients: ##              Estimate Std. Error t value Pr(>|t|)     ## (Intercept) -0.523701   0.396419  -1.321    0.192     ## .Q           0.036347   0.004781   7.602 2.85e-10 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 1.309 on 58 degrees of freedom ## Multiple R-squared:  0.4991, Adjusted R-squared:  0.4905  ## F-statistic: 57.79 on 1 and 58 DF,  p-value: 2.851e-10 ## Estimated parameters: coef(fit) ## (Intercept)          .Q  ## -0.52370105  0.03634651 ## 95% confidence intervals: confint(fit) ##                  2.5 %     97.5 % ## (Intercept) -1.3172199 0.26981784 ## .Q           0.0267761 0.04591691 ## Tidy summary table using 'broom::tidy()' tidy(fit, conf.int = TRUE, conf.level = 0.95) ## # A tibble: 2 × 7 ##   term        estimate std.error statistic  p.value conf.low conf.high ##   <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> ## 1 (Intercept)  -0.524    0.396       -1.32 1.92e- 1  -1.32      0.270  ## 2 .Q            0.0363   0.00478      7.60 2.85e-10   0.0268    0.0459 ## Calculate residual sum-of-squares sum(resid(fit)^2) ## [1] 99.4385"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-respiration.html","id":"bayesian-estimate-of-light-respiration-with-brms-and-stan","dir":"Articles","previous_headings":"Preferred version (photosynthesis >= 2.1.1)","what":"Bayesian estimate of light respiration with brms and Stan","title":"Fit models to estimate light respiration","text":"added option estimate light respiration (RdR_\\mathrm{d}) CO2_2 compensation point (Ci*C_\\mathrm{}^* Γ*\\Gamma^*) using amazing brms package fits models Stan. method advantage properly estimates confidence intervals, requires post-processing. example shows .","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-respiration.html","id":"walker-ort-2015-model-1","dir":"Articles","previous_headings":"Preferred version (photosynthesis >= 2.1.1) > Bayesian estimate of light respiration with brms and Stan","what":"Walker & Ort (2015) model","title":"Fit models to estimate light respiration","text":"code run, copy--paste console see output.","code":"library(dplyr) library(photosynthesis) library(tidyr)  acq_data = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>    read.csv()  fit = fit_photosynthesis(   .data = acq_data,   .photo_fun = \"r_light\",   .model = \"walker_ort_2015\",   .method = \"brms\",   .vars = list(.A = A, .Q = Qin, .C = Ci),   C_upper = 300,   # Irradiance levels used in experiment   Q_levels =  c(1500, 750, 375, 125, 100, 75, 50, 25),   brm_options = list(chains = 1, seed = 20221118) )  # The 'fit' object inherits class 'brmsfit' and many methods can be used  # The following code will extract parameter estimates and 95% CIs from the  # posterior distribution ests = fit |>   as.data.frame() |>   dplyr::select(     r_xy = `cor_.Q_level__Intercept__.C`,     sd_x = `sd_.Q_level__Intercept`,     sd_y = `sd_.Q_level__.C`,     mu_x = b_Intercept,     mu_y = b_.C   ) |>   dplyr::mutate(     gamma_star = -r_xy * sd_x / sd_y,     Rd = mu_x + gamma_star * mu_y   ) |>   dplyr::summarise(dplyr::across(gamma_star:Rd, list(     estimate = median,     lower = ~quantile(., probs = 0.25),     upper = ~quantile(., probs = 0.975)   ))) |>   pivot_longer(     everything(),     names_to = c(\"parameter\", \".value\"),     names_pattern = \"(gamma_star|Rd)_(estimate|lower|upper)\"   )"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-respiration.html","id":"yin-et-al--2011-model-1","dir":"Articles","previous_headings":"Preferred version (photosynthesis >= 2.1.1) > Bayesian estimate of light respiration with brms and Stan","what":"Yin et al. (2011) model","title":"Fit models to estimate light respiration","text":"code run, copy--paste console see output.","code":"library(photosynthesis)  acq_data = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>    read.csv()  fit = fit_photosynthesis(   .data = acq_data,   .photo_fun = \"r_light\",   .model = \"yin_etal_2011\",   .method = \"brms\",   .vars = list(.A = A, .phiPSII = PhiPS2, .Q = Qin),   Q_lower = 20,   Q_upper = 250,   brm_options = list(chains = 1) )  # The 'fit' object inherits class 'brmsfit' and many methods can be used summary(fit)"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-respiration.html","id":"kok-1956-model-1","dir":"Articles","previous_headings":"Preferred version (photosynthesis >= 2.1.1) > Bayesian estimate of light respiration with brms and Stan","what":"Kok (1956) model","title":"Fit models to estimate light respiration","text":"code run, copy--paste console see output.","code":"library(photosynthesis)  acq_data = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>    read.csv()  fit = fit_photosynthesis(   .data = acq_data,   .photo_fun = \"r_light\",   .model = \"kok_1956\",   .method = \"brms\",   .vars = list(.A = A, .Q = Qin),   Q_lower = 20,   Q_upper = 150,   brm_options = list(chains = 1) )  # The 'fit' object inherits class 'brmsfit' and many methods can be used summary(fit)"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-respiration.html","id":"deprecated-version-photosynthesis-2-1-1","dir":"Articles","previous_headings":"","what":"Deprecated version (photosynthesis <= 2.1.1)","title":"Fit models to estimate light respiration","text":"functions estimate light respiration original version (fit_r_light_kok(), fit_r_light_yin(), fit_r_light_WalkerOrt()) longer updated may phase future releases. Use one : fit_photosynthesisi(..., .photo_fun = 'r_light', .model = 'kok_1956') fit_photosynthesisi(..., .photo_fun = 'r_light', .model = 'walker_ort_1956') fit_photosynthesisi(..., .photo_fun = 'r_light', .model = 'yin_etal_2011')","code":"library(dplyr) library(photosynthesis)  round_to_nearest = function(x, values) {   sapply(x, function(y, values) {     values[which.min(abs(y - values))]   }, values = values) }  # Read in your data dat = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>    read.csv() |>   mutate(group = photosynthesis:::round_to_nearest(CO2_s, values = c(50, 100, 200, 300, 410, 600, 820, 1200, 1600))) |>   rename(A_net = A, PPFD = Qin, phi_PSII = PhiPS2, C_i = Ci)  # Fit light respiration with Yin method r_light = fit_r_light_yin(data = dat, PPFD_lower = 20, PPFD_upper = 250)  # Fit light respiration with Kok method r_light = fit_r_light_kok(data = dat, PPFD_lower = 20, PPFD_upper = 150)  # Fit light respiration across groups with Yin method r_lights = fit_many(   data = dat,   funct = fit_r_light_yin,   group = \"group\",   PPFD_lower = 20, PPFD_upper = 250,   progress = FALSE )  #Fit the Walker-Ort method for GammaStar and light respiration walker_ort = fit_r_light_WalkerOrt(dat)  # View model output summary(walker_ort[[1]]) ##  ## Call: ## lm(formula = Intercept ~ Slope, data = coefs) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -0.36114 -0.10958 -0.05553  0.08166  0.62016  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept)  -0.1526     0.1176  -1.297    0.224     ## Slope        -4.6004     0.4069 -11.307  5.1e-07 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.2513 on 10 degrees of freedom ## Multiple R-squared:  0.9275, Adjusted R-squared:  0.9202  ## F-statistic: 127.8 on 1 and 10 DF,  p-value: 5.103e-07 # View graph # walker_ort[[2]]  # View coefficients walker_ort[[3]] ##       GammaStar   r_light ## Slope  46.00427 -0.152643"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-respiration.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Fit models to estimate light respiration","text":"Kok B. 1956. inhibition photosynthesis intense light. Biochimica et Biophysica Acta 21: 234–244 Laisk . 1977. Kinetics photosynthesis photorespiration C3 plants. Nauka, Moscow. Walker BJ, Ort DR. 2015. Improved method measuring apparent CO2 photocompensation point resolves impact multiple internal conductances CO2 net gas exchange. Plant, Cell & Environment 38:2462- 2474 Yin X, Struik PC, Romero P, Harbinson J, Evers JB, van der Putten PEL, Vos J. 2009. Using combined measurements gas exchange chlorophyll fluorescence estimate parameters biochemical C3 photosynthesis model: critical appraisal new integrated approach applied leaves wheat (Triticum aestivum) canopy. Plant, Cell & Environment 32:448-464 Yin X, Sun Z, Struik PC, Gu J. 2011. Evaluating new method estimate rate leaf respiration light analysis combined gas exchange chlorophyll fluorescence measurements. Journal Experimental Botany 62: 3489–3499","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-response.html","id":"preferred-version-photosynthesis-2-1-1","dir":"Articles","previous_headings":"","what":"Preferred version (photosynthesis >= 2.1.1)","title":"Fitting light response curves","text":"package currently implements Marshall & Biscoe (1980) non-rectangular hyperbola model photosynthetic light response.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-response.html","id":"fit-the-light-response-curve-using-nonlinear-least-squares-nls","dir":"Articles","previous_headings":"Preferred version (photosynthesis >= 2.1.1)","what":"Fit the light-response curve using nonlinear least-squares (nls)","title":"Fitting light response curves","text":"","code":"library(broom) library(dplyr) library(photosynthesis)  # Read in your data dat = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>   read.csv() |>   # Set grouping variable   mutate(group = round(CO2_s, digits = 0)) |>   # For this example, round sequentially due to CO2_s set points   mutate(group = as.factor(round(group, digits = -1)))  # Fit one light-response curve fit = fit_photosynthesis(   .data = filter(dat, group == 600),   .photo_fun = \"aq_response\",   .vars = list(.A = A, .Q = Qabs), )  # The 'fit' object inherits class 'nls' and many methods can be used  ## Model summary: summary(fit) ##  ## Formula: .A ~ marshall_biscoe_1980(Q_abs = .data[[\".Qabs\"]], k_sat, phi_J,  ##     theta_J) - Rd ##  ## Parameters: ##          Estimate Std. Error t value Pr(>|t|)     ## k_sat   21.170337   0.154428  137.09 1.70e-08 *** ## phi_J    0.061543   0.001218   50.52 9.19e-07 *** ## theta_J  0.775752   0.014526   53.40 7.36e-07 *** ## Rd       0.666320   0.063490   10.49 0.000466 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.0539 on 4 degrees of freedom ##  ## Number of iterations to convergence: 5  ## Achieved convergence tolerance: 1.49e-08 ## Estimated parameters: coef(fit) ##       k_sat       phi_J     theta_J          Rd  ## 21.17033721  0.06154348  0.77575157  0.66631987 ## 95% confidence intervals: confint(fit) ##                2.5%       97.5% ## k_sat   20.75337772 21.60612987 ## phi_J    0.05835624  0.06501655 ## theta_J  0.73285635  0.81306156 ## Rd       0.49523165  0.84311606 ## Tidy summary table using 'broom::tidy()' tidy(fit, conf.int = TRUE, conf.level = 0.95) ## # A tibble: 4 × 7 ##   term    estimate std.error statistic      p.value conf.low conf.high ##   <chr>      <dbl>     <dbl>     <dbl>        <dbl>    <dbl>     <dbl> ## 1 k_sat    21.2      0.154       137.  0.0000000170  20.8      21.6    ## 2 phi_J     0.0615   0.00122      50.5 0.000000919    0.0584    0.0650 ## 3 theta_J   0.776    0.0145       53.4 0.000000736    0.733     0.813  ## 4 Rd        0.666    0.0635       10.5 0.000466       0.495     0.843 ## Calculate light compensation point coef(fit) |>   t() |>   as.data.frame() |>   mutate(LCP = ((Rd) * (Rd * theta_J - k_sat) / (phi_J * (Rd - k_sat)))) |>  ## Calculate residual sum-of-squares sum(resid(fit) ^ 2) ## [1] 33.59129"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-response.html","id":"plot-model-fit-and-raw-data","dir":"Articles","previous_headings":"","what":"Plot model fit and raw data","title":"Fitting light response curves","text":"deprecated function fit_aq_response() generated figure automatically, used geom_smooth() rather plotting model fit. now prefer use generic methods package ggplot2 plot fitted curve. allows users ability easily customize figures.","code":"library(ggplot2)  b = coef(fit)  df_predict = data.frame(Qabs = seq(0, 0.84 * 1500, length.out = 100)) |>   mutate(     A = marshall_biscoe_1980(       Q_abs = Qabs,       k_sat = b[\"k_sat\"],       b[\"phi_J\"],       b[\"theta_J\"]     ) - b[\"Rd\"]   )  ggplot(mapping = aes(Qabs, A)) +   geom_line(data = df_predict) +   geom_point(data = filter(dat, group == 600)) +   labs(     x = expression(\"Irradiance (\" * mu * mol ~ m^{-2} ~ s^{-1} * \")\"),     y = expression(A[net] ~ \"(\" * mu * mol ~ m^{-2} ~ s^{-1} * \")\")   ) +   theme_bw()"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-response.html","id":"fit-multiple-curves-with-photosynthesis-and-purrr","dir":"Articles","previous_headings":"","what":"Fit multiple curves with photosynthesis and purrr","title":"Fitting light response curves","text":"previous version, used fit_many() fit many light-response curves simultaneously. now prefer use generic methods package purrr already pretty good.","code":"library(purrr)  fits = dat |>   split(~ group) |>   map(fit_photosynthesis, .photo_fun = \"aq_response\", .vars = list(.A = A, .Q = Qabs))  ## Estimated parameters: fits |>   map(coef) |>   map(t) |>   map(as.data.frame) |>   imap_dfr(~ mutate(.x, CO2_s = .y)) ##        k_sat       phi_J   theta_J          Rd CO2_s ## 1 -0.1832198 0.004189779 0.2428476 -0.09209662    50 ## 2  2.6370733 0.017295931 0.8858139  0.59492313   100 ## 3  7.3481571 0.032255707 0.8376462  0.61479141   200 ## 4 11.4687982 0.045046336 0.7898826  0.76746932   300 ## 5 16.4505827 0.057537264 0.6997933  0.89736502   410 ## 6 21.1703372 0.061543475 0.7757516  0.66631987   600 ## 7 23.9305140 0.067744069 0.7514331  0.78493847   820 ## 8 25.0686239 0.068975627 0.7632357  0.58529680  1200 ## 9 25.6413999 0.071556328 0.7411443  0.45326420  1600"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-response.html","id":"fit-bayesian-light-response-curves-with-brms-and-stan","dir":"Articles","previous_headings":"","what":"Fit Bayesian light-response curves with brms and Stan","title":"Fitting light response curves","text":"Traditional model fitting use nonlinear least-squares approach, Bayesian methods advantages, especially complex data sets. added option fit single Bayesian light-response curve using amazing brms package fits models Stan. implemented complex approaches (e.g. multilevel light-response models) , ’s probably easier code model directly brms functions. Hopefully code can get started though. run example , copy--paste R Console try.","code":"fit = fit_photosynthesis(   .data = filter(dat, group == 600),   .photo_fun = \"aq_response\",   .vars = list(.A = A, .Q = Qabs),   .method = \"brms\",   brm_options = list(chains = 1) )  # The 'fit' object inherits class 'brmsfit' and many methods can be used summary(fit)"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-response.html","id":"fit-the-light-response-curve-with-photoinhibition-using-nonlinear-least-squares-nls","dir":"Articles","previous_headings":"Fit Bayesian light-response curves with brms and Stan","what":"Fit the light-response curve with photoinhibition using nonlinear least-squares (nls)","title":"Fitting light response curves","text":"","code":"library(broom) library(dplyr) library(tibble) library(photosynthesis)  # Simulate data set.seed(202411123)  ## Parameters  k_sat = 30 phi_J = 0.05 theta_J = 0.8 Rd = 3 b_inh = 0.003  ## Vector of light values Q = c(0, 25, 50, 75, 100, 125, 150, 200, 300, 400, 500, 600, 700, 800, 1000, 1200, 1400, 1600, 1800, 2000)  dat = tibble(   Qabs = 0.84 * Q,   A = photoinhibition(Qabs, k_sat, phi_J, theta_J, b_inh) - Rd + rnorm(length(Qabs), 0, 0.1) )  # Fit one light-response curve fit = fit_photosynthesis(   .data = dat,   .photo_fun = \"aq_response\",   .model = \"photoinhibition\",   .vars = list(.A = A, .Q = Qabs), )  # The 'fit' object inherits class 'nls' and many methods can be used  ## Model summary: summary(fit) ##  ## Formula: .A ~ photoinhibition(Q_abs = .data[[\".Qabs\"]], k_sat, phi_J,  ##     theta_J, b_inh) - Rd ##  ## Parameters: ##          Estimate Std. Error t value Pr(>|t|)     ## k_sat   3.023e+01  6.477e-01  46.671  < 2e-16 *** ## phi_J   5.023e-02  6.119e-04  82.087  < 2e-16 *** ## theta_J 8.001e-01  1.681e-02  47.584  < 2e-16 *** ## Rd      3.094e+00  4.595e-02  67.332  < 2e-16 *** ## b_inh   3.108e-03  3.282e-04   9.469 1.02e-07 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.07342 on 15 degrees of freedom ##  ## Number of iterations to convergence: 5  ## Achieved convergence tolerance: 1.49e-08 ## Estimated parameters: coef(fit) ##        k_sat        phi_J      theta_J           Rd        b_inh  ## 30.229369916  0.050228967  0.800109337  3.093915835  0.003107636 ## 95% confidence intervals: confint(fit) ##                 2.5%        97.5% ## k_sat   28.911503109 31.701749154 ## phi_J    0.048955458  0.051587628 ## theta_J  0.760461401  0.833244529 ## Rd       2.996235314  3.192817270 ## b_inh    0.002436191  0.003847506 ## Tidy summary table using 'broom::tidy()' tidy(fit, conf.int = TRUE, conf.level = 0.95) ## # A tibble: 5 × 7 ##   term    estimate std.error statistic  p.value conf.low conf.high ##   <chr>      <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> ## 1 k_sat   30.2      0.648        46.7  1.18e-17 28.9      31.7     ## 2 phi_J    0.0502   0.000612     82.1  2.55e-21  0.0490    0.0516  ## 3 theta_J  0.800    0.0168       47.6  8.81e-18  0.760     0.833   ## 4 Rd       3.09     0.0459       67.3  4.94e-20  3.00      3.19    ## 5 b_inh    0.00311  0.000328      9.47 1.02e- 7  0.00244   0.00385"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-response.html","id":"plot-model-fit-and-raw-data-1","dir":"Articles","previous_headings":"","what":"Plot model fit and raw data","title":"Fitting light response curves","text":"","code":"library(ggplot2)  b = coef(fit)  df_predict = data.frame(Qabs = seq(0, 0.84 * 2000, length.out = 100)) |>   mutate(     A = photoinhibition(       Q_abs = Qabs,       k_sat = b[\"k_sat\"],       b[\"phi_J\"],       b[\"theta_J\"],       b[\"b_inh\"]     ) - b[\"Rd\"]   )  ggplot(mapping = aes(Qabs, A)) +   geom_line(data = df_predict) +   geom_point(data = dat) +   labs(     x = expression(\"Irradiance (\" * mu * mol ~ m^{-2} ~ s^{-1} * \")\"),     y = expression(A[net] ~ \"(\" * mu * mol ~ m^{-2} ~ s^{-1} * \")\")   ) +   theme_bw()"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-response.html","id":"deprecated-version-photosynthesis-2-1-1","dir":"Articles","previous_headings":"","what":"Deprecated version (photosynthesis <= 2.1.1)","title":"Fitting light response curves","text":"fit_aq_response() function original version, longer updating may phase future releases. Use fit_photosynthesisi(..., .photo_fun = 'aq_response') instead.","code":"library(dplyr) library(photosynthesis) # Read in your data dat = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>   read.csv() |>   # Set grouping variable   mutate(group = round(CO2_s, digits = 0)) |>   # For this example, round sequentially due to CO2_s setpoints   mutate(group = as.factor(round(group, digits = -1))) |>   rename(A_net = A, PPFD = Qin)  # To fit one AQ curve fit = fit_aq_response(filter(dat, group == 600)) ## Warning: `fit_aq_response()` was deprecated in photosynthesis 2.1.1. ## ℹ Please use the `.photo_fun` argument of `fit_photosynthesis()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## Warning: `aq_response()` was deprecated in photosynthesis 2.1.1. ## ℹ Please use `marshall_biscoe_1980()` instead. ## ℹ The deprecated feature was likely used in the photosynthesis package. ##   Please report the issue at <https://github.com/cdmuir/photosynthesis/issues>. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. # Print model summary summary(fit[[1]]) ##  ## Formula: A_net ~ aq_response(k_sat, phi_J, Q_abs = data$Q_abs, theta_J) -  ##     Rd ##  ## Parameters: ##                 Estimate Std. Error t value Pr(>|t|)     ## k_sat          21.167200   0.158332  133.69 1.88e-08 *** ## phi_J.Q_abs     0.051907   0.001055   49.18 1.02e-06 *** ## theta_J         0.775484   0.014920   51.98 8.20e-07 *** ## Rd.(Intercept)  0.668495   0.065235   10.25 0.000511 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.05535 on 4 degrees of freedom ##  ## Number of iterations to convergence: 5  ## Achieved convergence tolerance: 1.49e-08 # Print fitted parameters fit[[2]] ##         A_sat      phi_J   theta_J        Rd      LCP  resid_SSs ## k_sat 21.1672 0.05190746 0.7754836 0.6684953 12.97289 0.01225491 # Print graph fit[[3]] # Fit many curves fits = fit_many(   data = dat,   funct = fit_aq_response,   group = \"group\",   progress = FALSE ) ## Warning: `fit_many()` was deprecated in photosynthesis 2.1.3. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. # Look at model summary for a given fit # First set of double parentheses selects an individual group value # Second set selects an element of the sublist summary(fits[[3]][[1]]) ##  ## Formula: A_net ~ aq_response(k_sat, phi_J, Q_abs = data$Q_abs, theta_J) -  ##     Rd ##  ## Parameters: ##                Estimate Std. Error t value Pr(>|t|)     ## k_sat          7.347423   0.141931  51.768 8.33e-07 *** ## phi_J.Q_abs    0.027192   0.001511  17.994 5.61e-05 *** ## theta_J        0.837778   0.030608  27.371 1.06e-05 *** ## Rd.(Intercept) 0.615283   0.086994   7.073  0.00211 **  ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.06799 on 4 degrees of freedom ##  ## Number of iterations to convergence: 4  ## Achieved convergence tolerance: 1.49e-08 # Print the parameters fits[[2]][[2]] ##          A_sat      phi_J   theta_J        Rd      LCP  resid_SSs ## k_sat 2.637157 0.01458002 0.8858892 0.5951635 42.17813 0.02446394 # Print the graph fits[[3]][[3]] #Compile graphs into a list for plotting fits_graphs = compile_data(fits, list_element = 3)  # Print graphs to jpeg # print_graphs(data = fits_graphs, path = tempdir(), output_type = \"jpeg\")  #Compile parameters into data.frame for analysis fits_pars = compile_data(fits, output_type = \"dataframe\", list_element = 2)"},{"path":"https://github.com/cdmuir/photosynthesis/articles/light-response.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Fitting light response curves","text":"Marshall B, Biscoe P. 1980. model C3 leaves describing dependence net photosynthesis irradiance. Journal Experimental Botany 31:29-39.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/mesophyll-conductance.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Fitting mesophyll conductance","text":"Harley PC, Loreto F, Di Marco G, Sharkey TD. 1992. Theoretical considerations estimating mesophyll conductance CO2 flux analysis response photosynthesis CO2. Plant Physiology 98:1429-1436.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/modeling-recommendations.html","id":"typical-hypostomatous-leaf","dir":"Articles","previous_headings":"","what":"‘Typical’ hypostomatous leaf","title":"Modeling C3 Photosynthesis: recommendations for common scenarios","text":"show implement model close widely used ones, boundary layer conductances high, cuticular conductance 0, stomatal conductance lower (abaxial) leaf surface, single mesophyll conductance. advantage approach simplicity. can ignore several complexities : Low boundary layer conductance varies surfaces (can happen large leaves low wind speed) Large cuticular conductance (can happen young leaves) Stomatal conductance can occur surface amphistomatous leaves (common herbs, example) Mesophyll conductance can partitioned air liquid phases complexities important , consider complex models can implement photosynthesis. , don’t care, ’s make things simple: Stomatal conductance CO2 (g_sc) net photosynthetic carbon assimilation () C3 photosynthesis model.","code":"library(photosynthesis) bake_par   = make_bakepar()                       # temperature response parameters constants  = make_constants(use_tealeaves = FALSE) # physical constants # leaf parameters leaf_par   = make_leafpar(   replace = list(     # Set cuticular conductance to 0     g_uc = set_units(0, mol / m^2 / s),     # All conductance through lower stomata and mesophyll     k_mc = set_units(0, 1),     k_sc = set_units(0, 1)   ),   use_tealeaves = FALSE   )    enviro_par = make_enviropar(use_tealeaves = FALSE) # environmental parameters  photo(leaf_par, enviro_par, bake_par, constants, use_tealeaves = FALSE) |>   dplyr::select(g_sc, A) |>   knitr::kable(caption = \"Stomatal conductance to CO2 (g_sc) and net photosynthetic carbon assimilation (A) from C3 photosynthesis model.\")"},{"path":"https://github.com/cdmuir/photosynthesis/articles/modeling-recommendations.html","id":"amphistomatous-leaf","dir":"Articles","previous_headings":"","what":"Amphistomatous leaf","title":"Modeling C3 Photosynthesis: recommendations for common scenarios","text":"leaves, especially woody plants, hypostomatous (Muir 2015) meaning stomatal conductance lower (abaxial surface). many fast-growing herbaceous species, especially crops (Milla et al. 2013), amphistomatous. lot measurements much conductance occurs surface (see Wall et al. 2022), assume stomata present leaf surfaces CO2 flux surface. amphistomatous leaves, suggest explicitly modeling conductance internal airspace (gias,cg_\\mathrm{ias,c}) liquid phase (gliq,cg_\\mathrm{liq,c}). version 2.1.0 possible photosynthesis. ’s simple example: Stomatal conductance CO2 (g_sc), internal airspace resistance lower upper surfaces (g_iasc_x), liquid-phase conductance (g_liqc), net photosynthetic carbon assimilation () C3 photosynthesis model.","code":"library(photosynthesis) bake_par   = make_bakepar()                       # temperature response parameters constants  = make_constants(use_tealeaves = FALSE) # physical constants # leaf parameters leaf_par   = make_leafpar(   replace = list(     # Set cuticular conductance to 0     g_uc = set_units(0, mol / m^2 / s),     # Half of conductance through each surface     k_mc = set_units(0, 1),     # airspace conductance: define effective distance through airspace     # See Nobel (2020) pg. 431     delta_ias_lower = set_units(100, um),     delta_ias_upper = set_units(100, um),     # liquid conductance: sum of cell wall, plasma membrane, and cytosol resistance     # We are implicitly ignoring chloroplast resistance     # See Nobel (2020) pg. 448-452     A_mes_A = set_units(20, 1),     g_liqc25 = set_units(0.02, mol / m^2 / s),     k_sc = set_units(1, 1)   ),   use_tealeaves = FALSE   )    enviro_par = make_enviropar(use_tealeaves = FALSE) # environmental parameters  photo(leaf_par, enviro_par, bake_par, constants, use_tealeaves = FALSE) |>   dplyr::select(g_sc, g_iasc_lower, g_iasc_upper, g_liqc, A) |>   knitr::kable(caption = \"Stomatal conductance to CO2 (g_sc), internal airspace resistance through lower and upper surfaces (g_iasc_x), liquid-phase conductance (g_liqc), and net photosynthetic carbon assimilation (A) from C3 photosynthesis model.\")"},{"path":"https://github.com/cdmuir/photosynthesis/articles/modeling-recommendations.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Modeling C3 Photosynthesis: recommendations for common scenarios","text":"Muir CD. 2015. Making pore choices: repeated regime shifts stomatal ratio. Proc Roy Soc B 282: 20151498. Nobel PS. 2020. Physicochemical Environmental Plant Physiology. 5th Edition. Academic Press. Rubén M, N de Diego-Vico, N Martín-Robles. 2013. Shifts stomatal traits following domestication plant species. Journal Experimental Botany 64(11): 3137–3146. Wall S, S Vialet-Chabrand, P Davey, JV Rie, Galle, J Cockram, T Lawson. 2022. Stomata abaxial adaxial leaf surfaces contribute differently leaf gas exchange photosynthesis wheat. New Phytologist 235(5): 1743-1756.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/photosynthesis-introduction.html","id":"minimum-worked-example","dir":"Articles","previous_headings":"","what":"Minimum worked example","title":"Introduction to the photosynthesis package","text":"can use default parameter settings simulate photosynthetic rate single leaf using make_*() functions photo().","code":"library(dplyr) library(magrittr) library(photosynthesis)  # Leaving the make_* functions empty will automatically default to defaults # parameters. bake_par   = make_bakepar()                       # temperature response parameters constants  = make_constants(use_tealeaves = FALSE) # physical constants leaf_par   = make_leafpar(use_tealeaves = FALSE)   # leaf parameters enviro_par = make_enviropar(use_tealeaves = FALSE) # environmental parameters  photo(leaf_par, enviro_par, bake_par, constants, quiet = TRUE,       use_tealeaves = FALSE) #>                 C_chl         value convergence                  g_tc #> 1 258.1218 [umol/mol] -1.363227e-06           0 0.1726157 [mol/m^2/s] #>                       A            g_mc          g_mc25            g_sc #> 1 27.94273 [umol/m^2/s] 0.4 [mol/m^2/s] 0.4 [mol/m^2/s] 0.4 [mol/m^2/s] #>               g_uc         gamma_star       gamma_star25            J_max #> 1 0.01 [mol/m^2/s] 37.9258 [umol/mol] 37.9258 [umol/mol] 200 [umol/m^2/s] #>            J_max25              K_C            K_C25  k_mc                 K_O #> 1 200 [umol/m^2/s] 268.3 [umol/mol] 268.3 [umol/mol] 1 [1] 165084.2 [umol/mol] #>                 K_O25  k_sc  k_uc leafsize     phi_J            R_d #> 1 165084.2 [umol/mol] 1 [1] 1 [1]  0.1 [m] 0.331 [1] 2 [umol/m^2/s] #>            R_d25     T_leaf   theta_J           V_cmax         V_cmax25 #> 1 2 [umol/m^2/s] 298.15 [K] 0.825 [1] 150 [umol/m^2/s] 150 [umol/m^2/s] #>              V_tpu          V_tpu25          C_air              O #> 1 200 [umol/m^2/s] 200 [umol/m^2/s] 420 [umol/mol] 0.21 [mol/mol] #>                P              PPFD      RH    wind           Ds_gmc #> 1 101.3246 [kPa] 1500 [umol/m^2/s] 0.5 [1] 2 [m/s] 487.29 [J/K/mol] #>            Ds_Jmax     Ea_gammastar           Ea_gmc          Ea_Jmax #> 1 388.04 [J/K/mol] 24459.97 [J/mol] 68901.56 [J/mol] 56095.18 [J/mol] #>              Ea_KC            Ea_KO            Ea_Rd         Ea_Vcmax #> 1 80989.78 [J/mol] 23719.97 [J/mol] 40446.75 [J/mol] 52245.78 [J/mol] #>            Ea_Vtpu           Ed_gmc          Ed_Jmax             D_c0 #> 1 52245.78 [J/mol] 148788.6 [J/mol] 121244.8 [J/mol] 1.29e-05 [m^2/s] #>              D_h0             D_m0             D_w0   epsilon       eT #> 1 1.9e-05 [m^2/s] 1.33e-05 [m^2/s] 2.12e-05 [m^2/s] 0.622 [1] 1.75 [1] #>             G                 R                sigma                 C_i #> 1 9.8 [m/s^2] 8.31446 [J/K/mol] 5.67e-08 [W/K^4/m^2] 350.1432 [umol/mol]"},{"path":"https://github.com/cdmuir/photosynthesis/articles/photosynthesis-introduction.html","id":"replace-default-parameters","dir":"Articles","previous_headings":"","what":"Replace default parameters","title":"Introduction to the photosynthesis package","text":"can look default parameters settings manual (run ?make_parameters). defaults reasonable, course probably want use different choices allow parameters vary. , ’ll demonstrate replace default. next section, ’ll show set gradient parameter values solve leaf temperature.","code":"# Use the `replace` argument to replace defaults. This must be a named list, and # each named element must have the proper units specified. See `?make_parameters` # for all parameter names and proper units.  # Temperature response parameters can be updated (but we won't do that here) bake_par = make_bakepar()  # Physical constants probably do not need to be replaced in most cases, # that's why we call them 'constants'! constants  = make_constants(use_tealeaves = FALSE)  # First, we'll change photosynthetic photon flux density to 1000 umol / (m^2 s) enviro_par = make_enviropar(   replace = list(     PPFD = set_units(1000, \"umol/m^2/s\")     ), use_tealeaves = FALSE   )  # Next, we'll change stomatal conductance to 0.3 mol / m^2 / s. leaf_par = make_leafpar(   replace = list(     g_sc = set_units(0.3, mol / m^2 / s)     ), use_tealeaves = FALSE   )  photo <- photo(leaf_par, enviro_par, bake_par, constants, quiet = TRUE,                use_tealeaves = FALSE)  photo |>   select(PPFD, C_chl, A) |>   knitr::kable()"},{"path":"https://github.com/cdmuir/photosynthesis/articles/photosynthesis-introduction.html","id":"environmental-gradients","dir":"Articles","previous_headings":"","what":"Environmental gradients","title":"Introduction to the photosynthesis package","text":"previous two examples, used photo function solve single parameter set. cases, ’ll want solve many parameter sets. function photosynthesis generalizes photo makes easy solve multiple parameter sets using argument structure. need specify multiple values one leaf environmental parameters photosynthesis uses purrr::cross function fit combinations1.","code":"# As before, use the `replace` argument to replace defaults, but this time we # enter multiple values  bake_par = make_bakepar() constants = make_constants(use_tealeaves = FALSE)  # First, we'll change the PPFD to 1000 and 1500 umol / (m^2 s) enviro_par = make_enviropar(   replace = list(     PPFD = set_units(c(1000, 1500), umol / m^2 / s)     ), use_tealeaves = FALSE   )  # Next, we'll change stomatal conductance to to 0.2 and 0.4 mol / m^2 / s leaf_par  = make_leafpar(   replace = list(     g_sc = set_units(c(0.2, 0.4), mol / m^2 / s)     ), use_tealeaves = FALSE   )  # Now there should be 4 combinations (high and low g_sc crossed with high and low PPFD) ph = photosynthesis(leaf_par, enviro_par, bake_par, constants,                       use_tealeaves = FALSE, progress = FALSE, quiet = TRUE)  ph |>    select(g_sc, PPFD, A) |>   knitr::kable()"},{"path":"https://github.com/cdmuir/photosynthesis/articles/photosynthesis-introduction.html","id":"parallel-processing","dir":"Articles","previous_headings":"","what":"Parallel processing","title":"Introduction to the photosynthesis package","text":"can take little simulate many different parameter sets. multiple processors available, can speed things running simulations parallel. photosynthesis function, simply use parallel = TRUE argument simulate parallel. ’ll need set future plan(). See ?future::plan detail. ’ll provide example simulating −CcA-C_c curve.","code":"# NOTE: parallel example is not evaluated because it was causing an issue with CRAN, but you can copy-and-paste the code to run on your own machine.  library(future) plan(\"multisession\") # Set up plan  # We'll use the `replace` argument to enter multiple atmospheric CO2 concentrations  bake_par = make_bakepar() constants  = make_constants(use_tealeaves = FALSE)  enviro_par = make_enviropar(   replace = list(     C_air = set_units(seq(10, 2000, length.out = 20), umol / mol)     ), use_tealeaves = FALSE   )  leaf_par  = make_leafpar(use_tealeaves = FALSE)  ph = photosynthesis(leaf_par, enviro_par, bake_par, constants,                       use_tealeaves = FALSE, progress = FALSE,                       quiet = TRUE, parallel = TRUE)  # Plot C_c versus A library(ggplot2)  ## Drop units for plotting ph %<>% mutate_if(~ is(.x, \"units\"), drop_units) ggplot(ph, aes(C_chl, A)) +   geom_line(size = 2) +   xlab(expression(paste(C[chl], \" [ppm]\"))) +   ylab(expression(paste(\"A [\", mu, \"mol \", m^-2~s^-1, \"]\"))) +   theme_bw() +   NULL"},{"path":"https://github.com/cdmuir/photosynthesis/articles/photosynthesis-introduction.html","id":"incorporating-leaf-temperature-using-tealeaves","dir":"Articles","previous_headings":"","what":"Incorporating leaf temperature using tealeaves","title":"Introduction to the photosynthesis package","text":"experiments, leaf temperature can kept close air temperature, nature, leaf temperature can quite bit different air temperature shade depending environmental leaf parameters. use_tealeaves = TRUE, photo() photosynthesis() call tealeaves package calculate leaf temperature using energy balance model.","code":"# NOTE: parallel example is not evaluated because it was causing an issue with CRAN, but you can copy-and-paste the code to run on your own machine.  # You will need to set use_tealeaves = TRUE when making parameters because additional parameters are needed for tealeaves.  bake_par = make_bakepar() constants  = make_constants(use_tealeaves = TRUE)  enviro_par = make_enviropar(   replace = list(     T_air = set_units(seq(288.15, 313.15, 1), K)     ), use_tealeaves = TRUE   )  leaf_par = make_leafpar(replace = list(     g_sc = set_units(c(0.2, 0.4), mol / m^2 / s)     ), use_tealeaves = TRUE   )  ph = photosynthesis(leaf_par, enviro_par, bake_par, constants,                       use_tealeaves = TRUE, progress = FALSE,                     quiet = TRUE, parallel = TRUE)  # Plot temperature and photosynthesis library(ggplot2)  ## Drop units for plotting ph %<>%    mutate_if(~ is(.x, \"units\"), drop_units) %>%   mutate(`g[s]` = ifelse(g_sc == 0.2, \"low\", \"high\"))  ggplot(ph, aes(T_air, T_leaf, color = `g[s]`)) +   geom_line(size = 2, lineend = \"round\") +   geom_abline(slope = 1, intercept = 0, linetype = \"dotted\") +   scale_color_discrete(name = expression(g[s])) +   xlab(expression(paste(T[air], \" [K]\"))) +   ylab(expression(paste(T[leaf], \" [K]\"))) +   theme_bw() +   NULL  ggplot(ph, aes(T_air, A, color = `g[s]`)) +   geom_line(size = 2, lineend = \"round\") +   scale_color_discrete(name = expression(g[s])) +   xlab(expression(paste(T[leaf], \" [K]\"))) +   ylab(expression(paste(\"A [\", mu, \"mol \", m^-2~s^-1, \"]\"))) +   theme_bw() +   NULL"},{"path":"https://github.com/cdmuir/photosynthesis/articles/pressure-volume.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Fitting pressure-volume curves","text":"Koide RT, Robichaux RH, Morse SR, Smith CM. 2000. Plant water status, hydraulic resistance capacitance. : Plant Physiological Ecology: Field Methods Instrumentation (eds RW Pearcy, JR Ehleringer, HA Mooney, PW Rundel), pp. 161-183. Kluwer, Dordrecht, Netherlands. Sack L, Cowan PD, Jaikumar N, Holbrook NM. 2003. ‘hydrology’ leaves: co-ordination structure function temperate woody species. Plant, Cell & Environment 26:1343-1356 Tyree MT, Hammel HT. 1972. Measurement turgor pressure water relations plants pressure bomb technique. Journal Experimental Botany 23:267-282.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/stomatal-conductance.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Fitting stomatal conductance models","text":"Ball JT, Woodrow IE, Berry JA. 1987. model predicting stomatal conductance contribution control photosynthesis different environmental conditions, Progress Photosynthesis Research, Proceedings VII International Congress Photosynthesis, vol. 4, edited . Biggins, pp. 221–224, Martinus Nijhoff, Dordrecht, Netherlands. Leuning R. 1995. critical appraisal coupled stomatal-photosynthesis model C3 plants. Plant, Cell & Environment 18:339-357. Medlyn , Duursma RA, Eamus D, Ellsworth DS, Prentice IC, Barton CVM, Crous KY, Angelis PD, Freeman M, Wingate L. 2011. Reconciling optimal empirical approaches modeling stomatal conductance. Global Change Biology 17:2134-2144.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/articles/temperature-response.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Fitting temperature response curves","text":"Arrhenius S. 1915. Quantitative laws biological chemistry. Bell. Heskel MA, O’Sullivan OS, Reich PB, Tjoelker MG, Weerasinghe LK, Penillard , Egerton JJG, Creek D, Bloomfield KJ, Xiang J, Sinca F, Stangl ZR, la Torre , Griffin KL, Huntingford C, Hurry V, Meir P, Turnbull MH, Atkin OK. 2016. Convergence temperature response leaf respiration across biomes plant functional types. PNAS 113:3832-3837 Kruse J, Adams MA. 2008. Three parameters comprehensively describe temperature response respiratory oxygen reduction. Plant, Cell & Environment 31:954-967 Liang LL, Arcus VL, Heskel MA, O’Sullivan OS, Weerasinghe LK, Creek D, Egerton JJG, Tjoelker MG, Atkin OK, Schipper LA. 2018. Macromolecular rate theory (MMRT) provides thermodynamics rationale underpin convergent temperature response plant leaf respiration. Global Change Biology 24:1538-1547 Medlyn , Dreyer E, Ellsworth D, Forstreuter M, Harley PC, Kirschbaum MUF, Le Roux X, Montpied P, Strassemeyer J, Walcroft , Wang K, Loutstau D. 2002. Temperature response parameters biochemically based model photosynthesis. II. review experimental data. Plant, Cell & Environment 25:1167-1179.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Stinziano. Author. Cassaundra Roback. Author. Demi Sargent. Author. Bridget Murphy. Author. Patrick Hudson. Author, data contributor. Chris Muir. Author, maintainer.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stinziano JR, D Gamble, BK Murphy, PJ Hudson, CD Muir. (2021). Principles resilient coding plant ecophysiologists. AoB PLANTS 13: plab059. Stinziano JR, Roback C, Gamble D, Murphy B, Hudson P,   Muir CD. (2023). photosynthesis: tools plant ecophysiology & modeling. R package version 2.1.4. https://CRAN.R-project.org/package=photosynthesis.","code":"@Article{,   author = {Joseph R Stinziano and Cassaundra Roback and Demi Gamble and Bridget K Murphy and Patrick J Hudson and Christopher D Muir},   title = {Principles of resilient coding for plant ecophysiologists},   journal = {AoB PLANTS},   volume = {13},   number = {5},   year = {2021},   month = {10},   issn = {2041-2851},   doi = {10.1093/aobpla/plab059},   url = {https://doi.org/10.1093/aobpla/plab059},   note = {plab059}, } @Misc{,   title = {photosynthesis: tools for plant ecophysiology & modeling},   author = {Joseph R Stinziano and Cassaundra Roback and Demi Gamble and Bridget K Murphy and Patrick J Hudson and Christopher D Muir},   note = {R package version 2.1.4},   year = {2023},   url = {https://CRAN.R-project.org/package=photosynthesis}, }"},{"path":[]},{"path":[]},{"path":"https://github.com/cdmuir/photosynthesis/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Tools for Plant Ecophysiology & Modeling","text":"photosynthesis R package modeling tools C3 photosynthesis, well analytical tools curve-fitting plant ecophysiology responses. uses R package units ensure parameters properly specified transformed calculations.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/index.html","id":"get-photosynthesis","dir":"","previous_headings":"","what":"Get photosynthesis","title":"Tools for Plant Ecophysiology & Modeling","text":"CRAN GitHub load photosynthesis","code":"install.packages(\"photosynthesis\") install.packages(\"remotes\") remotes::install_github(\"cdmuir/photosynthesis\") library(\"photosynthesis\")"},{"path":"https://github.com/cdmuir/photosynthesis/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Tools for Plant Ecophysiology & Modeling","text":"See following vignettes examples photosynthesis can : Introduction photosynthesis package Modeling C3 Photosynthesis: recommendations common scenarios Fitting light response curves Fitting CO2 response curves Fitting temperature response curves Fitting stomatal conductance models Fitting light respiration Fitting mesophyll conductance Fitting pressure-volume curves Fitting hydraulic vulnerability curves Sensitivity Analysis","code":""},{"path":"https://github.com/cdmuir/photosynthesis/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Tools for Plant Ecophysiology & Modeling","text":"Joseph Stinziano Chris Muir Cassaundra Roback Demi Sargent Bridget Murphy Patrick Hudson","code":""},{"path":"https://github.com/cdmuir/photosynthesis/index.html","id":"comments-and-contributions","dir":"","previous_headings":"","what":"Comments and contributions","title":"Tools for Plant Ecophysiology & Modeling","text":"welcome comments, criticisms, especially contributions! GitHub issues preferred way report bugs, ask questions, request new features. can submit issues : https://github.com/cdmuir/photosynthesis/issues","code":""},{"path":"https://github.com/cdmuir/photosynthesis/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Tools for Plant Ecophysiology & Modeling","text":"Please report issues bugs. License: MIT Get citation information photosynthesis R citation(package = 'photosynthesis') Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/A_supply.html","id":null,"dir":"Reference","previous_headings":"","what":"CO2 supply and demand function (mol / m^2 s) — A_supply","title":"CO2 supply and demand function (mol / m^2 s) — A_supply","text":"function intended called users directly.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/A_supply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CO2 supply and demand function (mol / m^2 s) — A_supply","text":"","code":"A_supply(C_chl, pars, unitless = FALSE, use_legacy_version = FALSE)  A_demand(C_chl, pars, unitless = FALSE)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/A_supply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CO2 supply and demand function (mol / m^2 s) — A_supply","text":"C_chl Chloroplastic CO2 concentration Pa class units pars Concatenated parameters (leaf_par, enviro_par, constants) unitless Logical. units set? function faster FALSE, input must correct units else results incorrect without warning. use_legacy_version Logical. legacy model (<2.1.0) used? See NEWS information. Default FALSE.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/A_supply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CO2 supply and demand function (mol / m^2 s) — A_supply","text":"Value mol / (m^2 s) class units","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/A_supply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CO2 supply and demand function (mol / m^2 s) — A_supply","text":"Supply function:  $$= g_\\mathrm{tc} (C_\\mathrm{air} - C_\\mathrm{chl})$$ Demand function:  $$= (1 - \\Gamma* / C_\\mathrm{chl}) \\mathrm{min}(W_\\mathrm{carbox}, W_\\mathrm{regen}, W_\\mathrm{tpu}) - R_\\mathrm{d}$$","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/A_supply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CO2 supply and demand function (mol / m^2 s) — A_supply","text":"","code":"bake_par = make_bakepar() constants = make_constants(use_tealeaves = FALSE) enviro_par = make_enviropar(use_tealeaves = FALSE) leaf_par = make_leafpar(use_tealeaves = FALSE) leaf_par = bake(leaf_par, enviro_par, bake_par, constants) # Or bake with piping (need library(magrittr)) # leaf_par %<>% bake(enviro_par, bake_par, constants) enviro_par$T_air = leaf_par$T_leaf  pars = c(leaf_par, enviro_par, constants) C_chl = set_units(350, umol/mol)  A_supply(C_chl, pars) #> 12.0831 [umol/m^2/s]  A_demand(C_chl, pars) #> 31.28078 [umol/m^2/s]"},{"path":"https://github.com/cdmuir/photosynthesis/reference/CO2_conductance.html","id":null,"dir":"Reference","previous_headings":"","what":"Conductance to CO2 (mol / m^2 / s) — CO2_conductance","title":"Conductance to CO2 (mol / m^2 / s) — CO2_conductance","text":"Conductance CO2 (mol / m^2 / s) g_tc: total conductance CO2 g_uc: cuticular conductance CO2 g_bc: boundary layer conductance CO2 g_mc: mesophyll conductance CO2 g_sc: stomatal conductance CO2","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/CO2_conductance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conductance to CO2 (mol / m^2 / s) — CO2_conductance","text":"","code":".get_gtc(pars, unitless, use_legacy_version)  .get_guc(pars, surface, unitless)  .get_gbc(pars, surface, unitless, use_legacy_version)  .get_gmc(pars, surface, unitless)  .get_gsc(pars, surface, unitless)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/CO2_conductance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conductance to CO2 (mol / m^2 / s) — CO2_conductance","text":"pars Concatenated parameters (leaf_par, enviro_par, constants) unitless Logical. units set? function faster FALSE, input must correct units else results incorrect without warning. use_legacy_version Logical. legacy model (<2.1.0) used? See NEWS information. Default FALSE. surface Leaf surface (lower upper)","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/CO2_conductance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conductance to CO2 (mol / m^2 / s) — CO2_conductance","text":"Default conductance model conductance model described section used default unless additional anatomical parameters described next section provided. Total conductance CO2 sum parallel conductances lower (\\(g_\\mathrm{c,lower}\\)) upper (\\(g_\\mathrm{c,upper}\\)) leaf portions: $$g_\\mathrm{c,total} = g_\\mathrm{c,lower} + g_\\mathrm{c,upper}$$ partial conductance consists two parallel conductances, cuticular conductance (\\(g_\\mathrm{u,c}\\)) -series conductances mesophyll (\\(g_\\mathrm{m,c}\\)), stomata (\\(g_\\mathrm{s,c}\\)), boundary layer (\\(g_\\mathrm{b,c}\\)). simplify formula, use substitute resistance \\(r_x = 1 / g_x\\). surface \\(\\): $$g_{\\mathrm{c},} = g_{\\mathrm{u},} + (1 / (r_{\\mathrm{m},} + r_{\\mathrm{s},} + r_{\\mathrm{b},}))$$ cuticular, stomatal, mesophyll conductances can different upper lower. partitioning factors (\\(k_x\\)) divide conductance surfaces keeping total conductance constant: $$g_{x,\\mathrm{lower}} = g_x (1 / (1 + k_x))$$ $$g_{x,\\mathrm{upper}} = g_x (k_x / (1 + k_x))$$ $$g_x = g_{x,\\mathrm{lower}} + g_{x,\\mathrm{upper}}$$ partitioning factors work: boundary layer conductances calculated basis mass heat transfer (see .get_gbc()). New conductance model conductance model described section implemented photosynthesis (>= 2.1.0) parameters calculate internal airspace liquid-phase conductances (A_mes_A, g_liqc) provided. parameters 1) effective path lengths lower upper leaf internal airspaces (delta_ias_lower, delta_ias_upper) 2) mesophyll area per leaf area (A_mes_A) liquid-phase conductance per mesophyll cell area (g_liqc). Two parallel diffusion pathways, one leaf surface, converge single CO2 concentration mesophyll cell boundary. use single liquid-phase resistance represent combined cell wall, plasmalemma, chloroplast resistances. gas-phase resistance boundary layer, cuticle/stomata, internal airspace \\(r_\\mathrm{gas,c}\\); liquid-phase intracellular resistance \\(r_\\mathrm{,c}\\). $$r_\\mathrm{total,c} = r_\\mathrm{gas,c} + r_\\mathrm{,c}$$ gas-phase resistance occurs two parallel pathways, refer 'lower' 'upper' pathways horizontally oriented leaves often different anatomical properties surface. gas-phase resistance pathway \\(\\\\{\\textrm{lower,upper\\}}\\) : $$r_{\\mathrm{gas,c},} = r_{\\mathrm{b,c},} + r_{\\mathrm{u+s,c},} + r_{\\mathrm{ias,c},}$$ subscripts \\(_\\mathrm{b}\\), \\(_\\mathrm{u+s}\\), \\(_\\mathrm{ias}\\) denote boundary layer, cuticular + stomatal, internal airspace, respectively. subscript \\(_\\mathrm{c}\\) indicates considering conductance CO2 rather another molecular species. Cuticular stomatal conductances (1 / resistance) parallel, : $$1 / r_{\\mathrm{u+s,c},} = g_{\\mathrm{u+s,c},} = g_{\\mathrm{u,c},} + g_{\\mathrm{s,c},}$$ Substituting expression equation \\(r_{\\mathrm{gas,c},}\\): $$r_{\\mathrm{gas,c},} = r_{\\mathrm{b,c},} + 1 / (g_{\\mathrm{u,c},} = g_{\\mathrm{s,c},}) + r_{\\mathrm{ias,c},}$$ total gas-phase resistance inverse sum parallel lower upper conductances: $$1 / r_{\\mathrm{gas,c}} = g_\\mathrm{gas,c,lower} + g_\\mathrm{gas,c,upper}$$ cuticular, stomatal, mesophyll conductances can different upper lower. partitioning factors \\(k_u\\) \\(k_s\\) divide total cuticular stomatal conductances, respectively, surfaces keeping total conductance constant: $$g_{x,\\mathrm{lower}} = g_x (1 / (1 + k_x))$$ $$g_{x,\\mathrm{upper}} = g_x (k_x / (1 + k_x))$$ $$g_x = g_{x,\\mathrm{lower}} + g_{x,\\mathrm{upper}}$$ partitioning factors work: internal airspace conductance diffusivity CO2 given temperature pressure divided effective path length: $$g_\\mathrm{ias,c,lower} = D_\\mathrm{c} / \\delta_\\mathrm{ias,lower}$$ $$g_\\mathrm{ias,c,upper} = D_\\mathrm{c} / \\delta_\\mathrm{ias,upper}$$ g_iasc_lower g_iasc_upper calculated bake function. See tealeaves::.get_Dx() calculating D_c. liquid-phase intracellular resistance given : $$1 / r_\\mathrm{,c} = g_\\mathrm{,c} = g_\\mathrm{liq,c} A_\\mathrm{mes} / $$ \\(g_\\mathrm{liq,c}\\) temperature sensitive. See bake(). boundary layer conductances calculated basis mass heat transfer (see .get_gbc()).","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/FvCB.html","id":null,"dir":"Reference","previous_headings":"","what":"Farquhar-von Caemmerer-Berry (FvCB) C3 photosynthesis model — FvCB","title":"Farquhar-von Caemmerer-Berry (FvCB) C3 photosynthesis model — FvCB","text":"Farquhar-von Caemmerer-Berry (FvCB) C3 photosynthesis model Rubisco-limited assimilation rate RuBP regeneration-limited assimilation rate TPU-limited assimilation rate","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/FvCB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Farquhar-von Caemmerer-Berry (FvCB) C3 photosynthesis model — FvCB","text":"","code":"FvCB(C_chl, pars, unitless = FALSE)  W_carbox(C_chl, pars, unitless = FALSE)  W_regen(C_chl, pars, unitless = FALSE)  W_tpu(C_chl, pars, unitless = FALSE)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/FvCB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Farquhar-von Caemmerer-Berry (FvCB) C3 photosynthesis model — FvCB","text":"C_chl Chloroplastic CO2 concentration Pa class units pars Concatenated parameters (leaf_par, enviro_par, constants) unitless Logical. units set? function faster FALSE, input must correct units else results incorrect without warning.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/FvCB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Farquhar-von Caemmerer-Berry (FvCB) C3 photosynthesis model — FvCB","text":"list four values units umol CO2 / (m^2 s) class units: W_carbox: Rubisco-limited assimilation rate W_regen: RuBP regeneration-limited assimilation rate W_tpu: TPU-limited assimilation rate : minimum W_carbox, W_regen, W_tpu","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/FvCB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Farquhar-von Caemmerer-Berry (FvCB) C3 photosynthesis model — FvCB","text":"Equations following Buckley Diaz-Espejo (2015): Rubisco-limited assimilation rate:  $$W_\\mathrm{carbox} = V_\\mathrm{c,max} C_\\mathrm{chl} / (C_\\mathrm{chl} + K_\\mathrm{m})$$ : $$K_\\mathrm{m} = K_\\mathrm{C} (1 + O / K_\\mathrm{O})$$ RuBP regeneration-limited assimilation rate:  $$W_\\mathrm{regen} = J C_\\mathrm{chl} / (4 C_\\mathrm{chl} + 8 \\Gamma*)$$ \\(J\\) function PPFD, obtained solving equation: $$0 = \\theta_J J ^ 2 - J (J_\\mathrm{max} + \\phi_J PPFD) + J_\\mathrm{max} \\phi_J PPFD$$ TPU-limited assimilation rate: $$W_\\mathrm{tpu} = 3 V_\\mathrm{tpu} C_\\mathrm{chl} / (C_\\mathrm{chl} - \\Gamma*)$$","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/FvCB.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Farquhar-von Caemmerer-Berry (FvCB) C3 photosynthesis model — FvCB","text":"Buckley TN Diaz-Espejo . 2015. Partitioning changes photosynthetic rate contributions different variables. Plant, Cell & Environment 38: 1200-11. Farquhar GD, Caemmerer S, Berry JA. 1980. biochemical model photosynthetic CO2 assimilation leaves C3 species. Planta 149: 78–90.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/FvCB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Farquhar-von Caemmerer-Berry (FvCB) C3 photosynthesis model — FvCB","text":"","code":"bake_par = make_bakepar() constants = make_constants(use_tealeaves = FALSE) enviro_par = make_enviropar(use_tealeaves = FALSE) leaf_par = make_leafpar(use_tealeaves = FALSE) leaf_par = bake(leaf_par, enviro_par, bake_par, constants)  pars = c(leaf_par, enviro_par, constants) C_chl = set_units(246.0161, umol / mol) FvCB(C_chl, pars) #> $W_carbox #> 43.12971 [umol/m^2/s] #>  #> $W_regen #> 34.71203 [umol/m^2/s] #>  #> $W_tpu #> 709.3539 [umol/m^2/s] #>  #> $A #> 34.71203 [umol/m^2/s] #>"},{"path":"https://github.com/cdmuir/photosynthesis/reference/J.html","id":null,"dir":"Reference","previous_headings":"","what":"J: Rate of electron transport (umol/m^2/s) — J","title":"J: Rate of electron transport (umol/m^2/s) — J","text":"Calculate rate electron transport function photosynthetic photon flux density (PPFD).","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/J.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"J: Rate of electron transport (umol/m^2/s) — J","text":"","code":"J(pars, unitless = FALSE)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/J.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"J: Rate of electron transport (umol/m^2/s) — J","text":"pars Concatenated parameters (leaf_par, enviro_par, constants) unitless Logical. units set? function faster FALSE, input must correct units else results incorrect without warning.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/J.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"J: Rate of electron transport (umol/m^2/s) — J","text":"Value \\(\\mu\\)mol/ (m^2 s) class units","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/J.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"J: Rate of electron transport (umol/m^2/s) — J","text":"\\(J\\) function PPFD solution quadratic expression: $$0 = \\theta_J J ^ 2 - J (J_\\mathrm{max} + \\phi_J PPFD) + J_\\mathrm{max} \\phi_J PPFD$$","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/J.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"J: Rate of electron transport (umol/m^2/s) — J","text":"","code":"library(magrittr) library(photosynthesis)  bake_par = make_bakepar() constants = make_constants(use_tealeaves = FALSE) enviro_par = make_enviropar(use_tealeaves = FALSE) leaf_par = make_leafpar(use_tealeaves = FALSE) enviro_par$T_air = leaf_par$T_leaf leaf_par %<>% bake(enviro_par, bake_par, constants)  pars = c(leaf_par, enviro_par, constants) J(pars, FALSE) #> 181.6577 [umol/m^2/s]"},{"path":"https://github.com/cdmuir/photosynthesis/reference/analyze_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Running 2-parameter sensitivity analyses — analyze_sensitivity","title":"Running 2-parameter sensitivity analyses — analyze_sensitivity","text":"Running 2-parameter sensitivity analyses","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/analyze_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running 2-parameter sensitivity analyses — analyze_sensitivity","text":"","code":"analyze_sensitivity(   data,   funct,   test1 = NA,   values1,   test2 = NA,   values2,   element_out = 1,   ... )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/analyze_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running 2-parameter sensitivity analyses — analyze_sensitivity","text":"data Dataframe funct Function use - use parentheses test1 Input parameter vary test values1 Values test1 use test2 Input parameter vary test values2 Values test2 use element_out List element compile ... Additional arguments required function","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/analyze_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running 2-parameter sensitivity analyses — analyze_sensitivity","text":"analyze_sensitivity runs 2-parameter sensitivity analysis. Note parameter value combinations break input function break function. 1-parameter sensitivity analysis, use test1 .","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/analyze_sensitivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running 2-parameter sensitivity analyses — analyze_sensitivity","text":"","code":"# \\donttest{ # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data <- read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Define a grouping factor based on light intensity to split the ACi # curves data$Q_2 <- as.factor((round(data$Qin, digits = 0)))  # Convert leaf temperature to K data$T_leaf <- data$Tleaf + 273.15  # Run a sensitivity analysis on gamma_star and mesophyll conductance # at 25 Celsius for one individual curve # pars <- analyze_sensitivity( #   data = data[data$Q_2 == 1500, ], #   funct = fit_aci_response, #   varnames = list( #     A_net = \"A\", #     T_leaf = \"T_leaf\", #     C_i = \"Ci\", #     PPFD = \"Qin\" #   ), #   useg_mct = TRUE, #   test1 = \"gamma_star25\", #   element_out = 1, #   test2 = \"g_mc25\", #   fitTPU = TRUE, #   Ea_gamma_star = 0, #   Ea_g_mc = 0, #   values1 = seq( #     from = 20, #     to = 40, #     by = 2 #   ), #   values2 = seq( #     from = 0.5, #     to = 2, #     by = 0.1 #   ) # )  # Graph V_cmax # ggplot(pars, aes(x = gamma_star25, y = g_mc25, z = V_cmax)) + #   geom_tile(aes(fill = V_cmax)) + #   labs( #     x = expression(Gamma * \"*\"[25] ~ \"(\" * mu * mol ~ mol^ #       { #         -1 #       } * \")\"), #     y = expression(g[m][25] ~ \"(\" * mu * mol ~ m^{ #       -2 #     } ~ s^{ #       -1 #     } ~ Pa^ #       { #         -1 #       } * \")\") #   ) + #   scale_fill_distiller(palette = \"Greys\") + #   geom_contour(colour = \"Black\", size = 1) + #   theme_bw() # # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/aq_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-rectangular hyperbolic model of light responses — aq_response","title":"Non-rectangular hyperbolic model of light responses — aq_response","text":"Please use marshall_biscoe_1980().","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/aq_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-rectangular hyperbolic model of light responses — aq_response","text":"","code":"aq_response(k_sat, phi_J, Q_abs, theta_J)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/aq_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-rectangular hyperbolic model of light responses — aq_response","text":"k_sat Light saturated rate process k phi_J Quantum efficiency process k Q_abs Absorbed light intensity (umol m-2 s-1) theta_J Curvature light response","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/aq_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-rectangular hyperbolic model of light responses — aq_response","text":"aq_response used describe response process absorbed light intensity. Assumes input absorbed light. Note absorbed light used, meaning phi_J becomes unclear. function designed used fit_aq_response, however easily fed different fitting approach (e.g. Bayesian approaches). Originally Marshall et al. 1980.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/aq_response.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Non-rectangular hyperbolic model of light responses — aq_response","text":"Marshall B, Biscoe P. 1980. model C3 leaves describing dependence net photosynthesis irradiance. J Ex Bot 31:29-39","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake.html","id":null,"dir":"Reference","previous_headings":"","what":"Leaf parameter temperature responses — bake","title":"Leaf parameter temperature responses — bake","text":"'bake' leaf parameters using temperature response functions","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leaf parameter temperature responses — bake","text":"","code":"bake(leaf_par, enviro_par, bake_par, constants, assert_units = TRUE)  temp_resp1(par25, E_a, R, T_leaf, T_ref, unitless)  temp_resp2(par25, D_s, E_a, E_d, R, T_leaf, T_ref, unitless)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leaf parameter temperature responses — bake","text":"leaf_par list leaf parameters inheriting class leaf_par. can generated using make_leafpar function. enviro_par list environmental parameters inheriting class enviro_par. can generated using make_enviropar function. bake_par list temperature response parameters inheriting class bake_par. can generated using make_bakepar function. constants list physical constants inheriting class constants. can generated using make_constants function. assert_units Logical. parameter units checked? function faster FALSE, input must correct units else results incorrect without warning. par25 Parameter value 25 °C class units. E_a Empirical temperature response value J/mol class units. R Ideal gas constant J / (mol K) class units. See make_constants(). T_leaf Leaf temperature K class units. converted °C. T_ref Reference temperature K class units. unitless Logical. units set? function faster FALSE, input must correct units else results incorrect without warning. D_s Empirical temperature response value J / (mol K) class units. E_d Empirical temperature response value J/mol class units.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leaf parameter temperature responses — bake","text":"Constructor function baked class. also inherit class leaf_par() list(). function ensures temperature \"baked \" leaf parameter calculations T_leaf using temperature response functions detailed .","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Leaf parameter temperature responses — bake","text":"Several leaf parameters (leaf_par()) temperature sensitive. Temperature-sensitive parameters input reference temperature 25 °C. parameters provided par_name25 \"baked\" using appropriate temperature response function parameters bake_par(). \"baked\" parameter name without \"25\" appended (par_name). E.g. V_cmax25 becomes V_cmax.  Temperature response functions following Buckley  Diaz-Espejo (2015)  Temperature response function 1 (temp_response1): $$\\mathrm{par}(T_\\mathrm{leaf}) = \\mathrm{par25}~\\mathrm{exp}(E_\\mathrm{} / (R T_\\mathrm{ref}) (T_\\mathrm{leaf} - 25) / (T_\\mathrm{leaf} + 273.15))$$ \\(T_\\mathrm{ref}\\) reference temperature K  \\(T_\\mathrm{leaf}\\) leaf temperature °C  Temperature response function 2 (temp_response2) equation multiplied : $$(1 + \\mathrm{exp}((D_\\mathrm{s} / R - E_\\mathrm{d} / (R T_\\mathrm{ref})))) / (1 + \\mathrm{exp}((D_\\mathrm{s} / R) - (E_\\mathrm{d} / (R (T_\\mathrm{leaf} + 273.15)))))$$ Function 1 increases exponentially temperature; Function 2 peaks particular temperature.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Leaf parameter temperature responses — bake","text":"Buckley TN, Diaz-Espejo . 2015. Partitioning changes photosynthetic rate contributions different variables. Plant, Cell Environment 38: 1200-1211.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leaf parameter temperature responses — bake","text":"","code":"bake_par = make_bakepar() constants = make_constants(use_tealeaves = FALSE) enviro_par = make_enviropar(use_tealeaves = FALSE) leaf_par = make_leafpar(   replace = list(T_leaf = set_units(293.15, K)),   use_tealeaves = FALSE ) baked_leafpar = bake(leaf_par, enviro_par, bake_par, constants)  baked_leafpar$V_cmax25 #> 150 [umol/m^2/s] baked_leafpar$V_cmax #> 104.7069 [umol/m^2/s]"},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake_par.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 class bake_par — bake_par","title":"S3 class bake_par — bake_par","text":"S3 class bake_par","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 class bake_par — bake_par","text":"","code":"bake_par(.x)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 class bake_par — bake_par","text":".x list constructed bake_par.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/bake_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 class bake_par — bake_par","text":"Constructor function bake_par class. function ensures leaf temperature gets properly \"baked\" leaf parameters.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/baked-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 class baked — baked-class","title":"S3 class baked — baked-class","text":"See bake()","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/calculated-parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default functions for calculated parameters in photosynthesis — calculated-parameters","title":"Get default functions for calculated parameters in photosynthesis — calculated-parameters","text":"Get default functions calculated parameters photosynthesis","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/calculated-parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default functions for calculated parameters in photosynthesis — calculated-parameters","text":"","code":"get_f_parameter(.f_name)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/calculated-parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default functions for calculated parameters in photosynthesis — calculated-parameters","text":".f_name character string function","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/compile_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compiling outputs from lists — compile_data","title":"Compiling outputs from lists — compile_data","text":"Compiling outputs lists","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/compile_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compiling outputs from lists — compile_data","text":"","code":"compile_data(data, output_type = \"list\", list_element)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/compile_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compiling outputs from lists — compile_data","text":"data List elements output_type Type desired output. graphs models, use \"list\", parameters, use \"dataframe\". list_element elements sublists wish compile?","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/compile_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compiling outputs from lists — compile_data","text":"compile_data converts outputs fit_many form readily usable analysis. Can used create dataframe fitted parameters, list model outputs, list graphs plotting. function restricted compiling outputs plantecophystools used compile elements list lists.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/compile_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compiling outputs from lists — compile_data","text":"","code":"# \\donttest{ # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data <- read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Define a grouping factor based on light intensity to split the ACi # curves data$Q_2 <- as.factor((round(data$Qin, digits = 0)))  # Convert leaf temperature to K data$T_leaf <- data$Tleaf + 273.15  # Fit many curves fits <- fit_many(   data = data,   varnames = list(     A_net = \"A\",     T_leaf = \"T_leaf\",     C_i = \"Ci\",     PPFD = \"Qin\"   ),   funct = fit_aci_response,   group = \"Q_2\" ) #> Warning: `fit_many()` was deprecated in photosynthesis 2.1.3. #>    |                                                                               |                                                                      |   0%   |                                                                               |=========                                                             |  12%   |                                                                               |==================                                                    |  25%   |                                                                               |==========================                                            |  38%   |                                                                               |===================================                                   |  50%   |                                                                               |============================================                          |  62%   |                                                                               |====================================================                  |  75%   |                                                                               |=============================================================         |  88%   |                                                                               |======================================================================| 100%  # Compile graphs into a list for plotting fits_graphs <- compile_data(fits,   list_element = 2 )  # Plot one graph from the compiled list plot(fits_graphs[[1]]) #> Warning: Removed 12 rows containing missing values or values outside the scale range #> (`geom_line()`).  # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/compute_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing measures of sensitivity — compute_sensitivity","title":"Computing measures of sensitivity — compute_sensitivity","text":"Computing measures sensitivity","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/compute_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing measures of sensitivity — compute_sensitivity","text":"","code":"compute_sensitivity(   data,   varnames = list(Par = \"Par\", test1 = \"test1\", test2 = \"test2\"),   test1_ref,   test2_ref )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/compute_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing measures of sensitivity — compute_sensitivity","text":"data Dataframe output sensitivity_analysis() varnames Variable names test1_ref Reference value parameter test2_ref Reference value parameter","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/compute_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing measures of sensitivity — compute_sensitivity","text":"compute_sensitivity calculates two sets sensitivity measures: parameter effect (Bauerle et al., 2014), control coefficient (Capaldo & Pandis, 1997). function useful determining much given input (assumed otherwise) can affect model output conclusions. Particularly useful given parameter unknown fitting modeling process.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/compute_sensitivity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Computing measures of sensitivity — compute_sensitivity","text":"Bauerle WL, Daniels AB, Barnard DM. 2014. Carbon water flux responses physiology environment interactions: sensitivity analysis variation climate photosynthetic stomatal parameters. Climate Dynamics 42: 2539-2554. Capaldo KP, Pandis SN 1997. Dimethylsulfide chemistry remote marine atmosphere: evaluation sensitivity analysis available mechanisms. J Geophys Res 102:23251-23267","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/compute_sensitivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computing measures of sensitivity — compute_sensitivity","text":"","code":"# \\donttest{ # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data <- read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Define a grouping factor based on light intensity to split the ACi # curves data$Q_2 <- as.factor((round(data$Qin, digits = 0)))  # Convert leaf temperature to K data$T_leaf <- data$Tleaf + 273.15  # Run a sensitivity analysis on gamma_star and mesophyll conductance # at 25 Celsius for one individual curve # pars <- analyze_sensitivity( #   data = data[data$Q_2 == 1500, ], #   funct = fit_aci_response, #   varnames = list( #     A_net = \"A\", #     T_leaf = \"T_leaf\", #     C_i = \"Ci\", #     PPFD = \"Qin\" #   ), #   useg_mct = TRUE, #   test1 = \"gamma_star25\", #   element_out = 1, #   test2 = \"g_mc25\", #   fitTPU = TRUE, #   Ea_gamma_star = 0, #   Ea_g_mc = 0, #   values1 = seq( #     from = 20, #     to = 60, #     by = 2 #   ), #   values2 = seq( #     from = 0.2, #     to = 2, #     by = 0.1 #   ) # ) # Compute measures of sensitivity # par2 <- compute_sensitivity( #   data = pars, #   varnames = list( #     Par = \"V_cmax\", #     test1 = \"gamma_star25\", #     test2 = \"g_mc25\" #   ), #   test1_ref = 42, #   test2_ref = 1 # ) # # Plot control coefficients # ggplot(par2, aes(y = CE_gamma_star25, x = CE_g_mc25, colour = V_cmax)) + #   geom_point() + #   theme_bw() # # Note that in this case a missing point appears due to an infinity # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/constants.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 class constants — constants","title":"S3 class constants — constants","text":"S3 class constants","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 class constants — constants","text":"","code":"constants(.x, use_tealeaves)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 class constants — constants","text":".x list constructed constants. use_tealeaves Logical. leaf energy balance used calculate leaf temperature (T_leaf)? TRUE, tleaf() calculates T_leaf. FALSE, user-defined T_leaf used. Additional parameters constants required, see make_parameters().","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/constants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 class constants — constants","text":"Constructor function constants class. function ensures physical constant inputs properly formatted.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/enviro_par.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 class enviro_par — enviro_par","title":"S3 class enviro_par — enviro_par","text":"S3 class enviro_par","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/enviro_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 class enviro_par — enviro_par","text":"","code":"enviro_par(.x, use_tealeaves)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/enviro_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 class enviro_par — enviro_par","text":".x list constructed enviro_par. use_tealeaves Logical. leaf energy balance used calculate leaf temperature (T_leaf)? TRUE, tleaf() calculates T_leaf. FALSE, user-defined T_leaf used. Additional parameters constants required, see make_parameters().","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/enviro_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 class enviro_par — enviro_par","text":"Constructor function enviro_par class. function ensures environmental parameter inputs properly formatted.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_PV_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting pressure-volume curves — fit_PV_curve","title":"Fitting pressure-volume curves — fit_PV_curve","text":"Fitting pressure-volume curves","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_PV_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting pressure-volume curves — fit_PV_curve","text":"","code":"fit_PV_curve(   data,   varnames = list(psi = \"psi\", mass = \"mass\", leaf_mass = \"leaf_mass\", bag_mass =     \"bag_mass\", leaf_area = \"leaf_area\"),   title = NULL )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_PV_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting pressure-volume curves — fit_PV_curve","text":"data Dataframe varnames Variable names. varnames = list(psi = \"psi\", mass = \"mass\", leaf_mass = \"leaf_mass\", bag_mass = \"bag_mass\", leaf_area = \"leaf_area\") psi leaf water potential MPa, mass weighed mass bag leaf g, leaf_mass mass leaf g, bag_mass mass bag g, leaf_area area leaf cm2. title Graph title","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_PV_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting pressure-volume curves — fit_PV_curve","text":"fit_PV_curve fits pressure-volume curve data determine: SWC: saturated water content per leaf mass (g H2O g leaf dry mass ^ -1), PI_o: osmotic potential full turgor (MPa), psi_TLP: leaf water potential turgor loss point (TLP) (MPa), RWC_TLP: relative water content TLP (%), eps: modulus elasticity full turgor (MPa), C_FT: relative capacitance full turgor (MPa ^ -1), C_TLP: relative capacitance TLP (MPa ^ -1), C_FTStar: absolute capacitance per leaf area (g m ^ -2 MPa ^ -1). Element 1 output list contains fitted parameters, element 2 contains water-psi graph, element 3 contains 1/psi-100-RWC graph.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_PV_curve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting pressure-volume curves — fit_PV_curve","text":"Koide RT, Robichaux RH, Morse SR, Smith CM. 2000. Plant water status, hydraulic resistance capacitance. : Plant Physiological Ecology: Field Methods Instrumentation (eds RW Pearcy, JR Ehleringer, HA Mooney, PW Rundel), pp. 161-183. Kluwer, Dordrecht, Netherlands Sack L, Cowan PD, Jaikumar N, Holbrook NM. 2003. 'hydrology' leaves: co-ordination structure function temperate woody species. Plant, Cell Environment, 26, 1343-1356 Tyree MT, Hammel HT. 1972. Measurement turgor pressure water relations plants pressure bomb technique. Journal Experimental Botany, 23, 267","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_PV_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting pressure-volume curves — fit_PV_curve","text":"","code":"# \\donttest{ # Read in data data <- read.csv(system.file(\"extdata\", \"PV_curve.csv\",   package = \"photosynthesis\" ))  # Fit one PV curve fit <- fit_PV_curve(data[data$ID == \"L2\", ],   varnames = list(     psi = \"psi\",     mass = \"mass\",     leaf_mass = \"leaf_mass\",     bag_mass = \"bag_mass\",     leaf_area = \"leaf_area\"   ) )  # See fitted parameters fit[[1]] #>        SWC      PI_o psi_TLP  RWC_TLP      eps       C_FT      C_TLP  C_FTStar #> 1 2.438935 -1.399302   -1.75 88.67684 12.20175 0.06456207 0.09923338 0.5161476  # Plot water mass graph fit[[2]]   # Plot PV Curve fit[[3]]   # Fit all PV curves in a file fits <- fit_many(data,   group = \"ID\",   funct = fit_PV_curve,   varnames = list(     psi = \"psi\",     mass = \"mass\",     leaf_mass = \"leaf_mass\",     bag_mass = \"bag_mass\",     leaf_area = \"leaf_area\"   ) ) #>    |                                                                               |                                                                      |   0%   |                                                                               |=======================                                               |  33%   |                                                                               |===============================================                       |  67%   |                                                                               |======================================================================| 100%  # See parameters fits[[1]][[1]] #>        SWC      PI_o psi_TLP  RWC_TLP      eps       C_FT      C_TLP  C_FTStar #> 1 2.438935 -1.399302   -1.75 88.67684 12.20175 0.06456207 0.09923338 0.5161476  # See water mass - water potential graph fits[[1]][[2]]   # See PV curve fits[[1]][[3]]   # Compile parameter outputs pars <- compile_data(   data = fits,   output_type = \"dataframe\",   list_element = 1 )  # Compile the water mass - water potential graphs graphs1 <- compile_data(   data = fits,   output_type = \"list\",   list_element = 2 )  # Compile the PV graphs graphs2 <- compile_data(   data = fits,   output_type = \"list\",   list_element = 3 ) # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aci_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting ACi curves — fit_aci_response","title":"Fitting ACi curves — fit_aci_response","text":"Fitting ACi curves","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aci_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting ACi curves — fit_aci_response","text":"","code":"fit_aci_response(   data,   varnames = list(A_net = \"A_net\", T_leaf = \"T_leaf\", C_i = \"C_i\", PPFD = \"PPFD\", g_mc =     \"g_mc\"),   P = 100,   fitTPU = TRUE,   alpha_g = 0,   R_d_meas = NULL,   useR_d = FALSE,   useg_mc = FALSE,   useg_mct = FALSE,   usegamma_star = FALSE,   useK_M = FALSE,   useK_C_K_O = FALSE,   alpha = 0.24,   theta_J = 0.85,   gamma_star25 = 42.75,   Ea_gamma_star = 37830,   K_M25 = 718.4,   Ea_K_M = 65508.28,   g_mc25 = 0.08701,   Ea_g_mc = 0,   K_C25 = NULL,   Ea_K_C = NULL,   K_O25 = NULL,   Ea_K_O = NULL,   Oconc = 21,   gamma_star_set = NULL,   K_M_set = NULL,   ... )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aci_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting ACi curves — fit_aci_response","text":"data Dataframe -Ci curve fitting varnames List variable names. varnames = list(A_net = \"A_net\", T_leaf = \"T_leaf\", C_i = \"C_i\", PPFD = \"PPFD\", g_mc = \"g_mc\"), A_net net CO2 assimilation, T_leaf leaf temperature Celsius, C_i intercellular CO2 concentration umol/mol, PPFD incident irradiance umol m-2 s-1 (note ASSUMED absorbed irradiance, sure adjust according light absorbance PSI/PSII partitioning accordingly interpret resultant values J J_max caution), g_mc mesophyll conductance CO2 mol m-2 s-1 Pa-1. P Atmospheric pressure kPa fitTPU triose phosphate utilization (V_TPU) fit? alpha_g Fraction respiratory glycolate carbon returned chloroplast (von Caemmerer, 2000). ACi curves show high-CO2 decline, value > 0. R_d_meas Measured value respiratory CO2 efflux umol m-2 s-1. Input value positive work expected equations. useR_d Use measured value R_d? Set TRUE using R_d_meas. useg_mc Use mesophyll conductance? Set TRUE specifying g_mc varnames . useg_mct Use mesophyll conductance temperature response? Set TRUE using temperature response mesophyll conductance. usegamma_star Specify gamma_star value? FALSE, uses temperature response function Nicotiana tabacum defaults Bernacchi et al. 2001. useK_M Specify K_M? FALSE, uses Arrhenius temperature response function Nicotiana tabacum defaults Bernacchi et al. 2001. useK_C_K_O Use individual carboxylation/oxygenation constants rubisco? TRUE, need specify values 25C activation energy Arrhenius temperature response function. alpha Quantum yield CO2 assimilation theta_J Curvature photosynthetic light response curve gamma_star25 gamma_star 25C umol mol-1 Ea_gamma_star Activation energy gamma_star J mol-1 K_M25 Michaelis-Menten constant rubisco 25C Ea_K_M Activation energy K_M J mol-1 g_mc25 Mesophyll conductance 25C mol m-2 s-1 Ea_g_mc Activation energy g_mc J mol-1 K_C25 Michaelis-Menten constant rubisco carboxylation 25C Ea_K_C Activation energy K_C J mol-1 K_O25 Michaelis-Menten constant rubisco oxygenation 25C Ea_K_O Activation energy K_O J mol-2 Oconc O2 concentration %. Used P calculate intracellular O2 using K_C_K_O gamma_star_set Value gamma_star use (ppm) usegamma_star = TRUE K_M_set Value K_M use useK_M = TRUE ... arguments pass ","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aci_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting ACi curves — fit_aci_response","text":"fit_aci_response fits ACi curves using approach similar Gu et al. 2010. Iterates possible C_i transition points checks inadmissible curve fits. curves admissible (either due poor data poor assumed parameters), output include dataframe NA values. Default parameters Bernacchi et al. 2001, 2002.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aci_response.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting ACi curves — fit_aci_response","text":"Bernacchi CJ, Singsaas EL, Pimentel C, Portis AR, Long SP. 2001. Improved temperature response functions models rubisco-limited photosynthesis. Plant Cell Environment 24:253-259. Bernacchi CJ, Portis AR, Nakano H, von Caemmerer S, Long SP. 2002. Temperature response mesophyll conductance. Implications determination rubisco enzyme kinetics limitations photosynthesis vivo. Plant Physiology 130:1992-1998. Gu L, Pallardy SG, Tu K, Law , Wullschleger SD. 2010. Reliable estimation biochemical parameters C3 leaf photosynthesis-intercellular carbon dioxide response curves. Plant Cell Environment 33:1852-1874. von Caemmerer S. 2000. Biochemical models leaf photosynthesis. CSIRO Publishing, Collingwood.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aci_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting ACi curves — fit_aci_response","text":"","code":"# \\donttest{ # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data <- read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Define a grouping factor based on light intensity to split the ACi # curves data$Q_2 <- as.factor((round(data$Qin, digits = 0)))  # Convert leaf temperature to K data$T_leaf <- data$Tleaf + 273.15  # Fit ACi curve. Note that we are subsetting the dataframe # here to fit for a single value of Q_2 fit <- fit_aci_response(data[data$Q_2 == 1500, ],   varnames = list(     A_net = \"A\",     T_leaf = \"T_leaf\",     C_i = \"Ci\",     PPFD = \"Qin\"   ) )  # View fitted parameters fit[[1]] #>   Num V_cmax V_cmax_se    J_max        J      J_se V_TPU V_TPU_se        R_d #> 6   0 62.797  2.176227 110.3051 103.9718 0.1847135  1000       NA -0.3470509 #>      R_d_se     cost citransition1 citransition2 V_cmax_pts J_max_pts V_TPU_pts #> 6 0.3947545 1.063979      427.6839      1450.485          8         4         0 #>   alpha alpha_g gamma_star25 Ea_gamma_star K_M25   Ea_K_M  g_mc25 Ea_g_mc Oconc #> 6  0.24       0        42.75         37830 718.4 65508.28 0.08701       0    21 #>   theta_J #> 6    0.85  # View graph fit[[2]] #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 12 rows containing missing values or values outside the scale range #> (`geom_line()`).   # View data with modelled parameters attached fit[[3]] #>    obs elapsed           E          A         Ca         Ci       gsw      gbw #> 5    5   718.0 0.006931781 -0.1406383   50.13264   49.25168 0.3977929 2.522060 #> 4    4   526.5 0.006822230  2.0214430  100.21358   87.79565 0.3666962 2.521511 #> 3    3   335.0 0.006835766  6.4968613  205.26303  167.01332 0.3460976 2.522437 #> 2    2   150.5 0.006840191 10.2002713  300.21123  240.05871 0.3409737 2.522305 #> 1    1     0.0 0.006933125 14.9322587  409.04219  322.96619 0.3458193 2.520800 #> 6    6   904.0 0.006959908 13.8964648  409.10935  342.49024 0.4284309 2.521371 #> 7    7  1095.5 0.006855393 14.4590842  409.94735  342.87631 0.4400143 2.521611 #> 8    8  1284.9 0.006750328 14.5049581  410.04603  344.29877 0.4499482 2.521286 #> 9    9  1474.9 0.006555650 19.0404318  599.40448  511.06913 0.4450791 2.521683 #> 10  10  1666.4 0.006172314 21.2998854  819.41719  711.81479 0.4172707 2.521531 #> 11  11  1850.9 0.005816880 22.5445607 1199.20481 1070.08139 0.3873778 2.522192 #> 12  12  2042.4 0.005492431 23.0818717 1599.29784 1449.48525 0.3585443 2.521088 #>          gtw       gtc     Rabs  TleafEB TleafCnd  SVPleaf   RHcham   VPcham #> 5  0.3659376 0.2313601 241.6674 28.25711 27.50283 3.686233 54.23631 2.142473 #> 4  0.3394385 0.2144290 241.6660 28.32365 27.51332 3.688497 51.78294 2.049588 #> 3  0.3217153 0.2031194 241.6668 28.34146 27.48478 3.682341 49.16601 1.948459 #> 2  0.3172804 0.2002916 241.6665 28.35318 27.50161 3.685970 48.57427 1.926466 #> 1  0.3214601 0.2029580 241.6649 28.35394 27.51282 3.688388 48.53677 1.928186 #> 6  0.3917129 0.2478568 241.6735 28.19920 27.44618 3.674032 56.52899 2.226646 #> 7  0.4013831 0.2540520 241.6663 28.19707 27.45756 3.676481 58.13998 2.285681 #> 8  0.4096338 0.2593415 241.6651 28.19446 27.45328 3.675559 59.48699 2.334040 #> 9  0.4055972 0.2567530 241.6672 28.23138 27.47052 3.679270 60.31725 2.363699 #> 10 0.3823593 0.2418674 241.6676 28.32178 27.49980 3.685581 60.60588 2.371703 #> 11 0.3571022 0.2257115 241.6632 28.44030 27.55257 3.696975 60.55004 2.371230 #> 12 0.3324348 0.2099589 241.6664 28.54705 27.60233 3.707749 60.30744 2.363090 #>     SVPcham  VPDleaf  LatHFlux SenHFlux NetTherm    EBSum       Fo     Fm #> 5  3.950255 1.543760 -305.6915 161.4569 13.96792 111.4008 159.0758 1.5088 #> 4  3.958037 1.638908 -300.8603 164.6094 14.24689 119.6619 159.0758 1.5088 #> 3  3.963021 1.733882 -301.4573 171.5026 14.83755 126.5497 159.0758 1.5088 #> 2  3.966021 1.759504 -301.6524 170.9804 14.79535 125.7898 159.0758 1.5088 #> 1  3.972630 1.760202 -305.7508 173.2585 15.00441 124.1770 159.0758 1.5088 #> 6  3.938945 1.447386 -306.9319 162.3951 14.04549 111.1821 159.0758 1.5088 #> 7  3.931341 1.390800 -302.3228 156.3355 13.51863 109.1976 159.0758 1.5088 #> 8  3.923614 1.341519 -297.6895 152.2902 13.16801 109.4338 159.0758 1.5088 #> 9  3.918778 1.315571 -289.1042 147.0823 12.71545 112.3608 159.0758 1.5088 #> 10 3.913322 1.313878 -272.1991 139.8305 12.08956 121.3886 159.0758 1.5088 #> 11 3.916149 1.325745 -256.5244 134.3833 11.61933 131.1414 159.0758 1.5088 #> 12 3.918405 1.344659 -242.2162 128.9097 11.15426 139.5142 159.0758 1.5088 #>          Fv    Fv.Fm     Adark       Fs     Fm.     PhiPS2 PS2.1  Qabs_fs #> 5  -157.567 -104.432 0.7443293 657.5796 725.760 0.09394343   0.5 1261.212 #> 4  -157.567 -104.432 0.7443293 650.4156 737.447 0.11801719   0.5 1261.207 #> 3  -157.567 -104.432 0.7443293 636.9378 748.390 0.14892266   0.5 1261.212 #> 2  -157.567 -104.432 0.7443293 629.2678 764.102 0.17646104   0.5 1261.210 #> 1  -157.567 -104.432 0.7443293 625.7865 787.556 0.20540703   0.5 1261.201 #> 6  -157.567 -104.432 0.7443293 614.0545 772.605 0.20521542   0.5 1261.244 #> 7  -157.567 -104.432 0.7443293 612.1308 772.188 0.20727749   0.5 1261.206 #> 8  -157.567 -104.432 0.7443293 613.9303 776.699 0.20956470   0.5 1261.208 #> 9  -157.567 -104.432 0.7443293 616.1023 802.446 0.23221960   0.5 1261.214 #> 10 -157.567 -104.432 0.7443293 616.8261 812.518 0.24084622   0.5 1261.218 #> 11 -157.567 -104.432 0.7443293 616.6304 807.480 0.23635208   0.5 1261.198 #> 12 -157.567 -104.432 0.7443293 618.1282 803.573 0.23077536   0.5 1261.214 #>           Afs       ETR   Fv..Fm.       PhiCO2        NPQ    Fo.     Fv. #> 5  -0.1406383  59.24130 0.3620481 -0.000701680 -0.9979211 463.00 262.760 #> 4   2.0214430  74.42206 0.3702869  0.001012612 -0.9979540 464.38 273.067 #> 3   6.4968613  93.91150 0.3874851  0.004561115 -0.9979839 458.40 289.990 #> 2  10.2002713 111.27717 0.4160989  0.007497519 -0.9980254 446.16 317.942 #> 1  14.9322587 129.52981 0.4469981  0.011249536 -0.9980842 435.52 352.036 #> 6  13.8964648 129.41335 0.4373063  0.010427908 -0.9980471 434.74 337.865 #> 7  14.4590842 130.70983 0.4419494  0.010874316 -0.9980461 430.92 341.268 #> 8  14.5049581 132.15229 0.4416370  0.010910677 -0.9980574 433.68 343.019 #> 9  19.0404318 146.43928 0.4628424  0.014506742 -0.9981197 431.04 371.406 #> 10 21.2998854 151.87978 0.4695502  0.016298180 -0.9981431 431.00 381.518 #> 11 22.5445607 149.04339 0.4697330  0.017285336 -0.9981315 428.18 379.300 #> 12 23.0818717 145.52859 0.4652882  0.017711139 -0.9981224 429.68 373.893 #>           qP       qN     qP_Fo    qN_Fo      Qin     Qabs     alpha      CO2_s #> 5  0.2594778 1.569372 0.1203146 4.596466 1500.001 1261.212 0.8408076   50.13264 #> 4  0.3187182 1.589942 0.1504767 4.670638 1499.995 1261.207 0.8408074  100.21358 #> 3  0.3843313 1.634703 0.1891219 4.740087 1500.001 1261.212 0.8408074  205.26303 #> 2  0.4240844 1.715037 0.2228568 4.839804 1499.998 1261.210 0.8408074  300.21123 #> 1  0.4595256 1.811122 0.2573980 4.988655 1499.988 1261.201 0.8408074  409.04219 #> 6  0.4692716 1.779872 0.2584236 4.893768 1500.039 1261.244 0.8408076  409.10935 #> 7  0.4690073 1.794735 0.2610569 4.891122 1499.994 1261.206 0.8408076  409.94735 #> 8  0.4745180 1.793711 0.2635404 4.919751 1499.996 1261.208 0.8408070  410.04603 #> 9  0.5017250 1.864678 0.2896368 5.083154 1500.003 1261.214 0.8408074  599.40448 #> 10 0.5129296 1.888302 0.2994785 5.147076 1500.008 1261.218 0.8408072  819.41719 #> 11 0.5031626 1.888975 0.2943373 5.115103 1499.985 1261.198 0.8408070 1199.20481 #> 12 0.4959837 1.873232 0.2877357 5.090307 1500.005 1261.214 0.8408070 1599.29784 #>         CO2_r    H2O_s    H2O_r     Flow       Pa    X.Pcham     Tair    Tleaf #> 5    50.33951 25.38131 18.62544 599.9975 84.31147 0.09997111 28.69028 27.50283 #> 4   102.91871 24.28060 17.62401 599.9987 84.31259 0.09997567 28.72422 27.51332 #> 3   213.16303 23.08108 16.40309 599.9994 84.31804 0.09997850 28.74592 27.48478 #> 2   312.46510 22.81993 16.13578 599.9952 84.32033 0.09998413 28.75898 27.50161 #> 1   426.81068 22.83998 16.06510 599.9904 84.32160 0.09991528 28.78770 27.51282 #> 6   425.85313 26.37858 19.60228 600.0019 84.31114 0.10000584 28.64085 27.44618 #> 7   427.21665 27.07755 20.40784 600.0050 84.31237 0.10001066 28.60755 27.45756 #> 8   427.31890 27.65027 21.08660 600.0011 84.31292 0.09999822 28.57365 27.45328 #> 9   622.37435 28.00072 21.62865 600.0012 84.31565 0.10001173 28.55241 27.47052 #> 10  845.77497 28.09407 22.09512 599.9957 84.32007 0.09997754 28.52842 27.49980 #> 11 1228.72516 28.08765 22.43412 599.9967 84.32256 0.09995831 28.54085 27.55257 #> 12 1631.16355 27.99132 22.65266 600.0037 84.32221 0.10002844 28.55077 27.60233 #>           Q     f_red     f_blue        F Q_modavg    Q_red   Q_blue    F_avg #> 5  1500.001 0.9729923 0.02700787 657.5939   5.0001 1454.621 40.38000 657.5796 #> 4  1499.995 0.9729945 0.02700592 650.4325   5.0001 1454.625 40.37032 650.4156 #> 3  1500.001 0.9729963 0.02700414 636.9214   5.0001 1454.630 40.37032 636.9378 #> 2  1499.998 0.9729978 0.02700251 629.2549   5.0001 1454.627 40.37129 629.2678 #> 1  1499.988 0.9729987 0.02700143 625.8157   5.0001 1454.619 40.37000 625.7865 #> 6  1500.039 0.9729927 0.02700752 613.9754   5.0001 1454.659 40.38000 614.0545 #> 7  1499.994 0.9729912 0.02700894 612.1460   5.0001 1454.614 40.38000 612.1308 #> 8  1499.996 0.9730076 0.02699250 613.9301   5.0001 1454.645 40.35161 613.9303 #> 9  1500.003 0.9729951 0.02700483 616.1015   5.0001 1454.631 40.36935 616.1023 #> 10 1500.008 0.9730035 0.02699635 616.8167   5.0001 1454.646 40.36226 616.8261 #> 11 1499.985 0.9730096 0.02699017 616.6175   5.0001 1454.635 40.35000 616.6304 #> 12 1500.005 0.9730066 0.02699341 618.1498   5.0001 1454.653 40.35129 618.1282 #>         dF.dt   dF_dc.dt  F_dc_avg  Flow_s  Flow_r   Txchg   Tirga Tchopper #> 5  -0.1319658 -10.276923 10454.562 634.039 229.327 24.9998 34.2650  30.0000 #> 4  -1.2368889  31.565812 10369.450 633.534 228.870 24.9996 34.3585  30.0000 #> 3  -0.3230769 -18.444444 10171.204 633.421 228.234 24.9988 34.4746  29.9999 #> 2  -0.7379145  -1.008547 10073.535 633.347 228.031 24.9994 34.5749  29.9999 #> 1   0.2101197  -7.982906 10049.481 632.207 228.721 24.9992 34.6410  30.0000 #> 6   6.0049231  86.683419  9843.230 633.950 230.393 24.9993 34.1884  29.9999 #> 7   1.1741880  20.968205  9819.399 633.934 231.109 24.9996 34.0928  29.9999 #> 8   0.6564786   5.070085  9857.133 633.937 231.456 25.0002 33.9822  29.9998 #> 9   1.6553846  36.687521  9896.574 633.938 232.251 24.9996 33.8629  29.9999 #> 10 -0.4431111  35.111453  9962.386 633.745 233.046 24.9999 33.7311  29.9997 #> 11 -0.7200342 144.601709 10310.792 633.088 234.314 25.0002 33.5765  29.9998 #> 12 -6.3896752 132.389744 10879.723 632.935 235.156 24.9997 33.4103  29.9997 #>         Ts      Tr  Q_2   T_leaf        C_i      A_net     PPFD          C #> 5  34.3729 34.4069 1500 300.6528   49.25168 -0.1406383 1500.001   49.25168 #> 4  34.4454 34.4799 1500 300.6633   87.79565  2.0214430 1499.995   87.79565 #> 3  34.5260 34.5617 1500 300.6348  167.01332  6.4968613 1500.001  167.01332 #> 2  34.6045 34.6424 1500 300.6516  240.05871 10.2002713 1499.998  240.05871 #> 1  34.6613 34.6957 1500 300.6628  322.96619 14.9322587 1499.988  322.96619 #> 6  34.3056 34.3388 1500 300.5962  342.49024 13.8964648 1500.039  342.49024 #> 7  34.2165 34.2480 1500 300.6076  342.87631 14.4590842 1499.994  342.87631 #> 8  34.1109 34.1430 1500 300.6033  344.29877 14.5049581 1499.996  344.29877 #> 9  33.9909 34.0206 1500 300.6205  511.06913 19.0404318 1500.003  511.06913 #> 10 33.8559 33.8862 1500 300.6498  711.81479 21.2998854 1500.008  711.81479 #> 11 33.7060 33.7354 1500 300.7026 1070.08139 22.5445607 1499.985 1070.08139 #> 12 33.5389 33.5673 1500 300.7523 1449.48525 23.0818717 1500.005 1449.48525 #>     V_cmax_pred J_max_pred V_TPU_part   A_carbox    A_regen    A_tpu #> 5  0.0007602564 0.00490591          1 -0.2993091 -0.2195318 2999.653 #> 4  0.0399514259 0.21238279          1  2.1617787  5.1734031 2999.653 #> 3  0.1115672156 0.44864815          1  6.6590354 11.3146357 2999.653 #> 2  0.1687441661 0.56810989          1 10.2495762 14.4197980 2999.653 #> 1  0.2253307719 0.65335758          1 13.8030452 16.6356366 2999.653 #> 6  0.2375534023 0.66875457          1 14.5705897 17.0358494 2999.653 #> 7  0.2377912053 0.66904525          1 14.5855230 17.0434051 2999.653 #> 8  0.2386661016 0.67011186          1 14.6404639 17.0711296 2999.653 #> 9  0.3289697041 0.76057763          1 20.3112590 19.4226011 2999.653 #> 10 0.4128071415 0.81999664          1 25.5759984 20.9670764 2999.653 #> 11 0.5198651658 0.87525024          1 32.2989210 22.4032801 2999.653 #> 12 0.5975664288 0.90585414          1 37.1783271 23.1987654 2999.653 #>       W_carbox   W_regen W_tpu    A_model #> 5   0.04774182  0.127519  3000 -0.2993091 #> 4   2.50882962  5.520454  3000  2.1617787 #> 3   7.00608623 11.661687  3000  6.6590354 #> 2  10.59662709 14.766849  3000 10.2495762 #> 1  14.15009607 16.982687  3000 13.8030452 #> 6  14.91764057 17.382900  3000 14.5705897 #> 7  14.93257389 17.390456  3000 14.5855230 #> 8  14.98751475 17.418180  3000 14.6404639 #> 9  20.65830991 19.769652  3000 19.4226011 #> 10 25.92304932 21.314127  3000 20.9670764 #> 11 32.64597187 22.750331  3000 22.4032801 #> 12 37.52537794 23.545816  3000 23.1987654  # Fit many curves fits <- fit_many(   data = data,   varnames = list(     A_net = \"A\",     T_leaf = \"T_leaf\",     C_i = \"Ci\",     PPFD = \"Qin\"   ),   funct = fit_aci_response,   group = \"Q_2\" ) #>    |                                                                               |                                                                      |   0%   |                                                                               |=========                                                             |  12%   |                                                                               |==================                                                    |  25%   |                                                                               |==========================                                            |  38%   |                                                                               |===================================                                   |  50%   |                                                                               |============================================                          |  62%   |                                                                               |====================================================                  |  75%   |                                                                               |=============================================================         |  88%   |                                                                               |======================================================================| 100%  # Print the parameters # First set of double parentheses selects an individual group value # Second set selects an element of the sublist fits[[3]][[1]] #>   Num  V_cmax V_cmax_se    J_max        J       J_se V_TPU V_TPU_se        R_d #> 6   0 8.94862 0.5509706 47.01527 16.63315 0.08692268  1000       NA -0.1565895 #>      R_d_se      cost citransition1 citransition2 V_cmax_pts J_max_pts #> 6 0.1264438 0.1194886      441.2967      1442.493          8         4 #>   V_TPU_pts alpha alpha_g gamma_star25 Ea_gamma_star K_M25   Ea_K_M  g_mc25 #> 6         0  0.24       0        42.75         37830 718.4 65508.28 0.08701 #>   Ea_g_mc Oconc theta_J #> 6       0    21    0.85  # Print the graph fits[[3]][[2]] #> Warning: Removed 12 rows containing missing values or values outside the scale range #> (`geom_line()`).   # Compile graphs into a list for plotting fits_graphs <- compile_data(fits,   list_element = 2 )  # Compile parameters into dataframe for analysis fits_pars <- compile_data(fits,   output_type = \"dataframe\",   list_element = 1 ) # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting light responses of net CO2 assimilation — fit_aq_response","title":"Fitting light responses of net CO2 assimilation — fit_aq_response","text":"Please use fit_aq_response2().","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting light responses of net CO2 assimilation — fit_aq_response","text":"","code":"fit_aq_response(   data,   varnames = list(A_net = \"A_net\", PPFD = \"PPFD\"),   usealpha_Q = FALSE,   alpha_Q = 0.84,   title = NULL )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting light responses of net CO2 assimilation — fit_aq_response","text":"data Dataframe containing CO2 assimilation light response varnames Variable names varnames = list(A_net = \"A_net\", PPFD = \"PPFD\"). A_net net CO2 assimilation umol m-2 s-1, PPFD incident irradiance. PPFD can corrected light absorbance using useapha_Q setting alpha_Q. usealpha_Q Correct light intensity absorbance? Default FALSE. alpha_Q Absorbance incident light. Default value 0.84. title Title graph","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting light responses of net CO2 assimilation — fit_aq_response","text":"fit_aq_response fits light response net CO2 assimilation. Output dataframe containing light saturated net CO2 assimilation, quantum yield CO2 assimilation (phi_J), curvature light response (theta_J), respiration (Rd), light compensation point (LCP), residual sum squares (resid_SS). Note Rd fitted way essentially Kok method, represents respiration value light may accurate. Rd output thus interpreted residual parameter ensure accurate fit light response parameters. Model originally Marshall & Biscoe 1980.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting light responses of net CO2 assimilation — fit_aq_response","text":"Marshall B, Biscoe P. 1980. model C3 leaves describing dependence net photosynthesis irradiance. J Ex Bot 31:29-39","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting light responses of net CO2 assimilation — fit_aq_response","text":"","code":"# \\donttest{ # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data = read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Fit many AQ curves # Set your grouping variable # Here we are grouping by CO2_s and individual data$C_s = (round(data$CO2_s, digits = 0))  # For this example we need to round sequentially due to CO2_s setpoints data$C_s = as.factor(round(data$C_s, digits = -1))  # To fit one AQ curve fit = fit_aq_response(data[data$C_s == 600, ],   varnames = list(     A_net = \"A\",     PPFD = \"Qin\"   ) ) #> Warning: `fit_aq_response()` was deprecated in photosynthesis 2.1.1. #> ℹ Please use the `.photo_fun` argument of `fit_photosynthesis()` instead. #> Warning: `aq_response()` was deprecated in photosynthesis 2.1.1. #> ℹ Please use `marshall_biscoe_1980()` instead. #> ℹ The deprecated feature was likely used in the photosynthesis package. #>   Please report the issue at <https://github.com/cdmuir/photosynthesis/issues>.  # Print model summary summary(fit[[1]]) #>  #> Formula: A_net ~ aq_response(k_sat, phi_J, Q_abs = data$Q_abs, theta_J) -  #>     Rd #>  #> Parameters: #>                 Estimate Std. Error t value Pr(>|t|)     #> k_sat          21.167200   0.158332  133.69 1.88e-08 *** #> phi_J.Q_abs     0.051907   0.001055   49.18 1.02e-06 *** #> theta_J         0.775484   0.014920   51.98 8.20e-07 *** #> Rd.(Intercept)  0.668495   0.065235   10.25 0.000511 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.05535 on 4 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08 #>   # Print fitted parameters fit[[2]] #>         A_sat      phi_J   theta_J        Rd      LCP  resid_SSs #> k_sat 21.1672 0.05190746 0.7754836 0.6684953 12.97289 0.01225491  # Print graph fit[[3]]   # Fit many curves fits = fit_many(   data = data,   varnames = list(     A_net = \"A\",     PPFD = \"Qin\",     group = \"C_s\"   ),   funct = fit_aq_response,   group = \"C_s\" ) #>    |                                                                               |                                                                      |   0%   |                                                                               |========                                                              |  11%   |                                                                               |================                                                      |  22%   |                                                                               |=======================                                               |  33%   |                                                                               |===============================                                       |  44%   |                                                                               |=======================================                               |  56%   |                                                                               |===============================================                       |  67%   |                                                                               |======================================================                |  78%   |                                                                               |==============================================================        |  89%   |                                                                               |======================================================================| 100%  # Look at model summary for a given fit # First set of double parentheses selects an individual group value # Second set selects an element of the sublist summary(fits[[3]][[1]]) #>  #> Formula: A_net ~ aq_response(k_sat, phi_J, Q_abs = data$Q_abs, theta_J) -  #>     Rd #>  #> Parameters: #>                Estimate Std. Error t value Pr(>|t|)     #> k_sat          7.347423   0.141931  51.768 8.33e-07 *** #> phi_J.Q_abs    0.027192   0.001511  17.994 5.61e-05 *** #> theta_J        0.837778   0.030608  27.371 1.06e-05 *** #> Rd.(Intercept) 0.615283   0.086994   7.073  0.00211 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.06799 on 4 degrees of freedom #>  #> Number of iterations to convergence: 4  #> Achieved convergence tolerance: 1.49e-08 #>   # Print the parameters fits[[3]][[2]] #>          A_sat      phi_J   theta_J        Rd      LCP  resid_SSs #> k_sat 7.347423 0.02719153 0.8377781 0.6152826 22.96322 0.01849038  # Print the graph fits[[3]][[3]]   # Compile graphs into a list for plotting fits_graphs = compile_data(fits,   list_element = 3 )  # Compile parameters into dataframe for analysis fits_pars = compile_data(fits,   output_type = \"dataframe\",   list_element = 2 ) # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response2.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit photosynthetic light-response curves — fit_aq_response2","title":"Fit photosynthetic light-response curves — fit_aq_response2","text":"recommend using fit_photosynthesis() argument .photo_fun = \"aq_response\" rather calling function directly.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit photosynthetic light-response curves — fit_aq_response2","text":"","code":"fit_aq_response2(   .data,   .model = \"default\",   .method = \"ls\",   usealpha_Q = FALSE,   alpha_Q = 0.84,   quiet = FALSE,   brm_options = NULL )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit photosynthetic light-response curves — fit_aq_response2","text":".data data frame containing plant ecophysiological data. See required_variables() variables required model. .model character string model name use. See get_all_models(). .method character string statistical method use: 'ls' least-squares 'brms' Bayesian model using brms::brm(). Default 'ls'. usealpha_Q Flag. light intensity multiplied alpha_Q fitting? Default FALSE (.e. assume '.Q' absorbed light). alpha_Q Number. Absorbance incident light. Default value 0.84. Ignored usealpha_Q = FALSE. quiet Flag. messages suppressed? Default FALSE. brm_options list options passed brms::brm() .method = \"brms\". Default NULL.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit photosynthetic light-response curves — fit_aq_response2","text":".method = 'ls': stats::nls() object. .method = 'brms': brms::brmsfit() object.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit photosynthetic light-response curves — fit_aq_response2","text":"Rd fitted way essentially Kok (1956) method, represents respiration value light may accurate. Rd output thus interpreted residual parameter ensure accurate fit light response parameters. Model originally Marshall & Biscoe (1980).","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit photosynthetic light-response curves — fit_aq_response2","text":"Marshall B, Biscoe P. 1980. model C3 leaves describing dependence net photosynthesis irradiance. J Ex Bot 31:29-39","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_aq_response2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit photosynthetic light-response curves — fit_aq_response2","text":"","code":"# \\donttest{  library(broom) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(photosynthesis)  # Read in your data dat = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>   read.csv() |>   # Set grouping variable   mutate(group = round(CO2_s, digits = 0)) |>   # For this example, round sequentially due to CO2_s set points   mutate(group = as.factor(round(group, digits = -1)))  # Fit one light-response curve fit = fit_photosynthesis(   .data = filter(dat, group == 600),   .photo_fun = \"aq_response\",   .vars = list(.A = A, .Q = Qabs), )  # The 'fit' object inherits class 'nls' and many methods can be used  ## Model summary: summary(fit) #>  #> Formula: .A ~ marshall_biscoe_1980(Q_abs = .data[[\".Qabs\"]], k_sat, phi_J,  #>     theta_J) - Rd #>  #> Parameters: #>          Estimate Std. Error t value Pr(>|t|)     #> k_sat   21.170337   0.154428  137.09 1.70e-08 *** #> phi_J    0.061543   0.001218   50.52 9.19e-07 *** #> theta_J  0.775752   0.014526   53.40 7.36e-07 *** #> Rd       0.666320   0.063490   10.49 0.000466 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.0539 on 4 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08 #>   ## Estimated parameters: coef(fit) #>       k_sat       phi_J     theta_J          Rd  #> 21.17033721  0.06154348  0.77575157  0.66631987   ## 95% confidence intervals: confint(fit) #> Waiting for profiling to be done... #>                2.5%       97.5% #> k_sat   20.75337772 21.60612987 #> phi_J    0.05835624  0.06501655 #> theta_J  0.73285635  0.81306156 #> Rd       0.49523165  0.84311606  ## Tidy summary table using 'broom::tidy()' tidy(fit, conf.int = TRUE, conf.level = 0.95) #> # A tibble: 4 × 7 #>   term    estimate std.error statistic      p.value conf.low conf.high #>   <chr>      <dbl>     <dbl>     <dbl>        <dbl>    <dbl>     <dbl> #> 1 k_sat    21.2      0.154       137.  0.0000000170  20.8      21.6    #> 2 phi_J     0.0615   0.00122      50.5 0.000000919    0.0584    0.0650 #> 3 theta_J   0.776    0.0145       53.4 0.000000736    0.733     0.813  #> 4 Rd        0.666    0.0635       10.5 0.000466       0.495     0.843   # Fit multiple curves with **photosynthesis** and **purrr**  library(purrr) #>  #> Attaching package: ‘purrr’ #> The following object is masked from ‘package:magrittr’: #>  #>     set_names  fits = dat |>   split(~ group) |>   map(fit_photosynthesis, .photo_fun = \"aq_response\", .vars = list(.A = A, .Q = Qabs))  # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_g_mc_variableJ.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting mesophyll conductance with the variable J method — fit_g_mc_variableJ","title":"Fitting mesophyll conductance with the variable J method — fit_g_mc_variableJ","text":"Fitting mesophyll conductance variable J method","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_g_mc_variableJ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting mesophyll conductance with the variable J method — fit_g_mc_variableJ","text":"","code":"fit_g_mc_variableJ(   data,   varnames = list(A_net = \"A_net\", J_etr = \"J_etr\", C_i = \"C_i\", PPFD = \"PPFD\", phi_PSII     = \"phi_PSII\"),   usealpha_Q = FALSE,   alpha_Q = 0.84,   beta_Q = 0.5,   gamma_star,   R_d,   P = 100 )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_g_mc_variableJ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting mesophyll conductance with the variable J method — fit_g_mc_variableJ","text":"data Dataframe varnames Variable names fit g_mc. varnames = list(A_net = \"A_net\", J_etr = \"J_etr\", C_i = \"C_i\", PPFD = \"PPFD\", phi_PSII = \"phi_PSII\"), A_net net CO2 assimilation umol m-2 s-1, J_etr linear electron transport flux umol m-2 s-1, C_i intercellular CO2 concentration umol mol-1, PPFD incident irradiance umol m-2 s-1, phi_PSII operating efficiency photosystem II. usealpha_Q Recalculate electron transport new absorbance value? alpha_Q Absorbance photosynthetically active radiation beta_Q Partitioning absorbed light energy PSI PSII gamma_star Photorespiratory CO2 compensation point umol mol-1 R_d Respiration rate umol m-2 s-1 P Atmospheric pressure kPa","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_g_mc_variableJ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting mesophyll conductance with the variable J method — fit_g_mc_variableJ","text":"fit_g_mc_variableJ fits mesophyll conductance according Harley et al. 1992. also tests reliability calculation calculates mean reliable values. Note output units umol m-2 s-1 Pa-1.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_g_mc_variableJ.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting mesophyll conductance with the variable J method — fit_g_mc_variableJ","text":"Harley PC, Loreto F, Di Marco G, Sharkey TD. 1992. Theoretical considerations estimating mesophyll conductance CO2 flux analysis response photosynthesis CO2. Plant Physiol 98:1429 - 1436.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_g_mc_variableJ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting mesophyll conductance with the variable J method — fit_g_mc_variableJ","text":"","code":"# \\donttest{ # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data <- read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Note: there will be issues here if the alpha value used # for calculating ETR is off, if gamma_star is incorrect, # if R_d is incorrect. data <- fit_g_mc_variableJ(data,   varnames = list(     A_net = \"A\",     J_etr = \"ETR\",     C_i = \"Ci\",     PPFD = \"Qin\",     phi_PSII = \"PhiPS2\"   ),   gamma_star = 46,   R_d = 0.153,   usealpha_Q = TRUE,   alpha_Q = 0.84,   beta_Q = 0.5,   P = 84 )  # Note that many g_mc values from this method can be unreliable ggplot(data, aes(x = CO2_s, y = g_mc, colour = reliable)) +   labs(     x = expression(CO[2] ~ \"(\" * mu * mol ~ mol^       {         -1       } * \")\"),     y = expression(g[m] ~ \"(mol\" ~ m^{       -2     } ~ s^{       -1     } ~ Pa^       {         -1       } * \")\")   ) +   geom_point(size = 2) +   theme_bw() +   theme(legend.position = \"bottom\")   # Plot QAQC graph according to Harley et al. 1992 ggplot(data, aes(x = CO2_s, y = dCcdA, colour = reliable)) +   labs(     x = expression(CO[2] ~ \"(\" * mu * mol ~ mol^       {         -1       } * \")\"),     y = expression(delta * C[chl] * \"/\" * delta * A)   ) +   geom_hline(yintercept = 10) +   geom_point(size = 2) +   theme_bw() +   theme(legend.position = \"bottom\")  # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_gs_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting stomatal conductance models — fit_gs_model","title":"Fitting stomatal conductance models — fit_gs_model","text":"Fitting stomatal conductance models","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_gs_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting stomatal conductance models — fit_gs_model","text":"","code":"fit_gs_model(   data,   varnames = list(A_net = \"A_net\", C_air = \"C_air\", g_sw = \"g_sw\", RH = \"RH\", VPD =     \"VPD\"),   model = c(\"BallBerry\", \"Leuning\", \"Medlyn_partial\", \"Medlyn_full\"),   D0 = 3,   ... )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_gs_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting stomatal conductance models — fit_gs_model","text":"data Dataframe varnames Variable names Ball-Berry model: varnames = list(A_net = \"A_net\", C_air = \"C_air\", g_sw = \"g_sw\", RH = \"RH\") A_net net CO2 assimilation, C_air CO2 concentration leaf surface umol mol-1, g_sw stomatal conductance H2O, RH relative humidity proportion. Leuning model: varnames = list(A_net = \"A_net\", C_air = \"C_air\", g_sw = \"g_sw\", VPD = \"VPD\") A_net net CO2 assimilation, C_air CO2 concentration leaf surface umol mol-1, g_sw stomatal conductance H2O, VPD leaf air vapor pressure deficit kPa. Medlyn et al. 2011 models: varnames = list(A_net = \"A_net\", C_air = \"C_air\", g_sw = \"g_sw\", VPD = \"VPD\") A_net net CO2 assimilation, C_air CO2 concentration leaf surface umol mol-1, g_sw stomatal conductance H2O, VPD leaf air vapor pressure deficit kPa. model model(s) fit? Defaults models. Available options \"BallBerry\", \"Leuning\", \"Medlyn_partial\", \"Medlyn_full\", Ball et al. (1987), Leuning (1995), Medlyn et al. (2011). D0 Vapor pressure sensitivity stomata (Leuning 1995) ... Arguments pass nlsLM() function Medlyn models.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_gs_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting stomatal conductance models — fit_gs_model","text":"fit_gs_model fits one stomatal conductance models data. top level output list named fitted model, second level contains Model, Parameters, Graph, order.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_gs_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting stomatal conductance models — fit_gs_model","text":"Ball JT, Woodrow IE, Berry JA. 1987. model predicting stomatal conductance contribution control photosynthesis different environmental conditions, Progress Photosynthesis Research, Proceedings VII International Congress Photosynthesis, vol. 4, edited . Biggins, pp. 221–224, Martinus Nijhoff, Dordrecht, Netherlands. Leuning R. 1995. critical appraisal coupled stomatal- photosynthesis model C3 plants. Plant Cell Environ 18:339-357 Medlyn , Duursma RA, Eamus D, Ellsworth DS, Prentice IC, Barton CVM, Crous KY, Angelis PD, Freeman M, Wingate L. 2011. Reconciling optimal empirical approaches modeling stomatal conductance. Glob Chang Biol 17:2134-2144","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_gs_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting stomatal conductance models — fit_gs_model","text":"","code":"# \\donttest{ # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data <- read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Convert RH to a proportion data$RH <- data$RHcham / 100  # Fit stomatal conductance models # Can specify a single model, or all as below fits <- fit_gs_model(   data = data,   varnames = list(     A_net = \"A\",     C_air = \"Ca\",     g_sw = \"gsw\",     RH = \"RH\",     VPD = \"VPDleaf\"   ),   model = c(     \"BallBerry\",     \"Leuning\",     \"Medlyn_partial\",     \"Medlyn_full\"   ),   D0 = 3 )  # Look at BallBerry model summary: summary(fits[[\"BallBerry\"]][[\"Model\"]]) #>  #> Call: #> lm(formula = g_sw ~ gs_mod_ballberry(A_net = A_net, C_air = C_air,  #>     RH = RH), data = data) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -0.1516 -0.1007 -0.0557  0.1372  0.2498  #>  #> Coefficients: #>                                                          Estimate Std. Error #> (Intercept)                                             1.481e-01  1.471e-02 #> gs_mod_ballberry(A_net = A_net, C_air = C_air, RH = RH) 1.627e-05  2.832e-06 #>                                                         t value Pr(>|t|)     #> (Intercept)                                              10.062  < 2e-16 *** #> gs_mod_ballberry(A_net = A_net, C_air = C_air, RH = RH)   5.744 1.13e-07 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1248 on 94 degrees of freedom #> Multiple R-squared:  0.2598,\tAdjusted R-squared:  0.2519  #> F-statistic: 32.99 on 1 and 94 DF,  p-value: 1.132e-07 #>   # Look at BallBerry parameters fits[[\"BallBerry\"]][[\"Parameters\"]] #>          g0          g1 #> 1 0.1480627 1.62664e-05  # Look at BallBerry plot fits[[\"BallBerry\"]][[\"Graph\"]]   # Fit many g_sw models # Set your grouping variable # Here we are grouping by Qin and individual data$Q_2 <- as.factor((round(data$Qin, digits = 0)))  fits <- fit_many(data,   varnames = list(     A_net = \"A\",     C_air = \"Ca\",     g_sw = \"gsw\",     RH = \"RH\",     VPD = \"VPDleaf\"   ),   funct = fit_gs_model,   group = \"Q_2\" ) #>    |                                                                               |                                                                      |   0%Error in nlsModel(formula, mf, start, wts) :  #>   singular gradient matrix at initial parameter estimates #>    |                                                                               |=========                                                             |  12%   |                                                                               |==================                                                    |  25%   |                                                                               |==========================                                            |  38%   |                                                                               |===================================                                   |  50%   |                                                                               |============================================                          |  62%   |                                                                               |====================================================                  |  75%   |                                                                               |=============================================================         |  88%   |                                                                               |======================================================================| 100%  # Look at the Medlyn_partial outputs at 750 PAR # Model summary summary(fits[[\"750\"]][[\"Medlyn_partial\"]][[\"Model\"]]) #>  #> Formula: g_sw ~ gs_mod_opti(A_net = A_net, C_air = C_air, VPD = VPD, g0,  #>     g1) #>  #> Parameters: #>    Estimate Std. Error t value Pr(>|t|)     #> g0  0.38778    0.03317  11.692 3.73e-07 *** #> g1 -1.09754    0.83022  -1.322    0.216     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.04375 on 10 degrees of freedom #>  #> Number of iterations to convergence: 2  #> Achieved convergence tolerance: 1.49e-08 #>   # Model parameters fits[[\"750\"]][[\"Medlyn_partial\"]][[\"Parameters\"]] #>          g0        g1 #> 1 0.3877773 -1.097544  # Graph fits[[\"750\"]][[\"Medlyn_partial\"]][[\"Graph\"]]   # Compile parameter outputs for BallBerry model # Note that it's the first element for each PAR value # First compile list of BallBerry fits bbmods <- compile_data(   data = fits,   output_type = \"list\",   list_element = 1 ) # Now compile the parameters (2nd element) into a dataframe bbpars <- compile_data(   data = bbmods,   output_type = \"dataframe\",   list_element = 2 )  # Convert group variable back to numeric bbpars$ID <- as.numeric(bbpars$ID)  # Take quick look at light response of intercept parameters plot(g0 ~ ID, bbpars)   # Compile graphs graphs <- compile_data(   data = bbmods,   output_type = \"list\",   list_element = 3 )  # Look at 3rd graph graphs[[3]]  # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_hydra_vuln_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting hydraulic vulnerability curves — fit_hydra_vuln_curve","title":"Fitting hydraulic vulnerability curves — fit_hydra_vuln_curve","text":"Fitting hydraulic vulnerability curves","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_hydra_vuln_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting hydraulic vulnerability curves — fit_hydra_vuln_curve","text":"","code":"fit_hydra_vuln_curve(   data,   varnames = list(psi = \"psi\", PLC = \"PLC\"),   start_weibull = list(a = 2, b = 2),   title = NULL )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_hydra_vuln_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting hydraulic vulnerability curves — fit_hydra_vuln_curve","text":"data Dataframe varnames List variable names. varnames = list(psi = \"psi\", PLC = \"PLC\") psi water potential MPa, PLC percent loss conductivity. start_weibull starting values nls fitting routine Weibull curve title Title output graph","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_hydra_vuln_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting hydraulic vulnerability curves — fit_hydra_vuln_curve","text":"fit_hydra_vuln_curve fits sigmoidal function (Pammenter & Van der Willigen, 1998) linearized according Ogle et al. (2009). Output list containing sigmoidal model element 1 Weibull model element 4, fit parameters 95% confidence interval models element 2, hydraulic parameters element 3 (including P25, P50, P88, P95, S50, Pe, Pmax, DSI). Px (25 95): water potential x% conductivity lost. S50: slope 50% loss conductivity. Pe: air entry point. Pmax: hydraulic failure threshold. DSI: drought stress interval. Element 5 graph showing fit, P50, Pe, Pmax.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_hydra_vuln_curve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting hydraulic vulnerability curves — fit_hydra_vuln_curve","text":"Ogle K, Barber JJ, Willson C, Thompson B. 2009. Hierarchical statistical modeling xylem vulnerability cavitation. New Phytologist 182:541-554 Pammenter NW, Van der Willigen CV. 1998. mathematical statistical analysis curves illustrating vulnerability xylem cavitation. Tree Physiology 18:589-593","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_hydra_vuln_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting hydraulic vulnerability curves — fit_hydra_vuln_curve","text":"","code":"# \\donttest{ # Read in data data <- read.csv(system.file(\"extdata\", \"hydraulic_vulnerability.csv\",   package = \"photosynthesis\" ))  # Fit hydraulic vulnerability curve fit <- fit_hydra_vuln_curve(data[data$Tree == 4 & data$Plot == \"Control\", ],   varnames = list(     psi = \"P\",     PLC = \"PLC\"   ),   title = \"Control 4\" )  # Return Sigmoidal model summary summary(fit[[1]]) #>  #> Call: #> lm(formula = H_log ~ psi, data = data[data$H_log < Inf, ]) #>  #> Residuals: #>       38       39       40       41       42  #> -0.01214  0.01361 -0.09323  0.20473 -0.11296  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  4.88183    0.17588   27.76 0.000103 *** #> psi         -1.09305    0.03988  -27.41 0.000107 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1457 on 3 degrees of freedom #> Multiple R-squared:  0.996,\tAdjusted R-squared:  0.9947  #> F-statistic: 751.1 on 1 and 3 DF,  p-value: 0.0001066 #>   # Return Weibull model summary summary(fit[[4]]) #>  #> Formula: K.Kmax ~ exp(-((psi/a)^b)) #>  #> Parameters: #>   Estimate Std. Error t value Pr(>|t|)     #> a  4.99160    0.06222   80.22 1.45e-07 *** #> b  3.22807    0.22158   14.57 0.000129 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.02427 on 4 degrees of freedom #>  #> Number of iterations to convergence: 8  #> Achieved convergence tolerance: 1.49e-08 #>   # Return model parameters with 95\\% confidence intervals fit[[2]] #>           Value Parameter     Curve #> b...1  4.466238         b Sigmoidal #> a...2 -1.093052         a Sigmoidal #> b...3  3.228068         b   Weibull #> a...4  4.991601         a   Weibull  # Return hydraulic parameters fit[[3]] #>        P25      P50      P88      P95      S50       Pe     Pmax      DSI #> 1 3.461151 4.466238 6.289053 7.160017 27.32629 2.636498 6.295978 3.659480 #> 2 3.393285 4.455847 6.300135 7.012168 25.10775 2.464430 6.447264 3.982834 #>       Curve #> 1 Sigmoidal #> 2   Weibull  # Return graph fit[[5]]   # Fit many curves fits <- fit_many(   data = data,   varnames = list(     psi = \"P\",     PLC = \"PLC\"   ),   group = \"Tree\",   funct = fit_hydra_vuln_curve ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100%  # To select individuals from the many fits # Return model summary summary(fits[[1]][[1]]) # Returns model summary #>  #> Call: #> lm(formula = H_log ~ psi, data = data[data$H_log < Inf, ]) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -0.6650 -0.4293  0.0984  0.3096  0.8015  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   4.8662     0.4452   10.93 4.35e-06 *** #> psi          -1.0439     0.1010  -10.34 6.61e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.5216 on 8 degrees of freedom #> Multiple R-squared:  0.9304,\tAdjusted R-squared:  0.9217  #> F-statistic: 106.9 on 1 and 8 DF,  p-value: 6.607e-06 #>   # Return sigmoidal model output fits[[1]][[2]] #>           Value Parameter     Curve #> b...1  4.661514         b Sigmoidal #> a...2 -1.043902         a Sigmoidal #> b...3  3.433237         b   Weibull #> a...4  5.297359         a   Weibull  # Return hydraulic parameters fits[[1]][[3]] #>        P25      P50      P88      P95      S50       Pe     Pmax      DSI #> 1 3.609104 4.661514 6.570151 7.482123 26.09754 2.745624 6.577403 3.831778 #> 2 3.685164 4.760983 6.593668 7.292066 24.99209 2.760350 6.761615 4.001265 #>       Curve #> 1 Sigmoidal #> 2   Weibull  # Return graph fits[[1]][[5]]   # Compile parameter outputs pars <- compile_data(   data = fits,   output_type = \"dataframe\",   list_element = 3 )  # Compile graphs graphs <- compile_data(   data = fits,   output_type = \"list\",   list_element = 5 ) # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_many.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting many functions across groups — fit_many","title":"Fitting many functions across groups — fit_many","text":"longer updating function. Please use generic methods like map instead. See vignette(\"light-response\") example.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_many.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting many functions across groups — fit_many","text":"","code":"fit_many(data, funct, group, progress = TRUE, ...)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_many.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting many functions across groups — fit_many","text":"data Dataframe funct Function fit group Grouping variables progress Flag. Show progress bar? ... Arguments function fit. Use ?functionname read help file available arguments given function.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_many.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting many functions across groups — fit_many","text":"fit_many fits function across every instance grouping variable.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_many.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting many functions across groups — fit_many","text":"","code":"# \\donttest{ # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data = read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Define a grouping factor based on light intensity to split the ACi # curves data$Q_2 = as.factor((round(data$Qin, digits = 0)))  # Convert leaf temperature to K data$T_leaf = data$Tleaf + 273.15  # Fit many curves fits = fit_many(   data = data,   varnames = list(     A_net = \"A\",     T_leaf = \"T_leaf\",     C_i = \"Ci\",     PPFD = \"Qin\"   ),   funct = fit_aci_response,   group = \"Q_2\" ) #>    |                                                                               |                                                                      |   0%   |                                                                               |=========                                                             |  12%   |                                                                               |==================                                                    |  25%   |                                                                               |==========================                                            |  38%   |                                                                               |===================================                                   |  50%   |                                                                               |============================================                          |  62%   |                                                                               |====================================================                  |  75%   |                                                                               |=============================================================         |  88%   |                                                                               |======================================================================| 100%  # Print the parameters # First set of double parentheses selects an individual group value # Second set selects an element of the sublist fits[[3]][[1]] #>   Num  V_cmax V_cmax_se    J_max        J       J_se V_TPU V_TPU_se        R_d #> 6   0 8.94862 0.5509706 47.01527 16.63315 0.08692268  1000       NA -0.1565895 #>      R_d_se      cost citransition1 citransition2 V_cmax_pts J_max_pts #> 6 0.1264438 0.1194886      441.2967      1442.493          8         4 #>   V_TPU_pts alpha alpha_g gamma_star25 Ea_gamma_star K_M25   Ea_K_M  g_mc25 #> 6         0  0.24       0        42.75         37830 718.4 65508.28 0.08701 #>   Ea_g_mc Oconc theta_J #> 6       0    21    0.85  # Print the graph fits[[3]][[2]] #> Warning: Removed 12 rows containing missing values or values outside the scale range #> (`geom_line()`).   # Compile graphs into a list for plotting fits_graphs = compile_data(fits,   list_element = 2 )   # Compile parameters into dataframe for analysis fits_pars = compile_data(fits,   output_type = \"dataframe\",   list_element = 1 ) # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_photosynthesis.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit photosynthetic models with gas-exchange data — fit_photosynthesis","title":"Fit photosynthetic models with gas-exchange data — fit_photosynthesis","text":"Fit photosynthetic models gas-exchange data","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_photosynthesis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit photosynthetic models with gas-exchange data — fit_photosynthesis","text":"","code":"fit_photosynthesis(   .data,   .photo_fun,   .model = \"default\",   .vars = NULL,   .method = \"ls\",   ...,   quiet = FALSE,   brm_options = NULL )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_photosynthesis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit photosynthetic models with gas-exchange data — fit_photosynthesis","text":".data data frame containing plant ecophysiological data. See required_variables() variables required model. .photo_fun character string photosynthesis function call. One : aq_response, r_light. .model character string model name use. See get_all_models(). .vars list rename variables .data. See required_variables() accepted variable names. .method character string statistical method use: 'ls' least-squares 'brms' Bayesian model using brms::brm(). Default 'ls'. ... Additional arguments passed specific models. See specific help pages type photosynthetic model: Light-response curves fit_aq_response2() Light respiration fit_r_light2() quiet Flag. messages suppressed? Default FALSE. brm_options list options passed brms::brm() .method = \"brms\". Default NULL.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_photosynthesis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit photosynthetic models with gas-exchange data — fit_photosynthesis","text":"fitted model object class 'lm' 'nls' method = 'ls' class 'brmsfit' method = 'brms'","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_photosynthesis.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit photosynthetic models with gas-exchange data — fit_photosynthesis","text":"function fit models data several methods require post-processing extract meaningful parameter estimates confidence intervals. See vignettes explanation examples. Light-response curves: vignette(\"light-response\", package = \"photosynthesis\") Light respiration: vignette(\"light-respiration\", package = \"photosynthesis\")","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating light respiration — fit_r_light_kok","title":"Estimating light respiration — fit_r_light_kok","text":"Please use fit_r_light2().","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating light respiration — fit_r_light_kok","text":"","code":"fit_r_light_kok(   data,   varnames = list(A_net = \"A_net\", PPFD = \"PPFD\"),   PPFD_lower = 40,   PPFD_upper = 100 )  fit_r_light_WalkerOrt(   data,   varnames = list(A_net = \"A_net\", C_i = \"C_i\", PPFD = \"PPFD\"),   P = 100,   C_i_threshold = 300 )  fit_r_light_yin(   data,   varnames = list(A_net = \"A_net\", PPFD = \"PPFD\", phi_PSII = \"phi_PSII\"),   PPFD_lower = 40,   PPFD_upper = 100 )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating light respiration — fit_r_light_kok","text":"data Dataframe varnames List variable names PPFD_lower Lower light intensity limit estimating Rlight (Kok & Yin) PPFD_upper Upper light intensity limit estimating Rlight (Kok & Yin) P Atmospheric pressure kPa (Walker & Ort, 2015) C_i_threshold Threshold C_i (umol / mol) cut data linear region fitting light respiration gamma_star (Walker & Ort, 2015)","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating light respiration — fit_r_light_kok","text":"fit_r_light_kok estimates light respiration using Kok method (Kok, 1956). Kok method involves looking breakpoint light response net CO2 assimilation low light intensities extrapolating data breakpoint estimate light respiration y-intercept. r_light value negative, denoting efflux CO2. fit_r_light_WalkerOrt estimates light respiration GammaStar according Walk & Ort (2015) using slope- intercept regression method find intercept multiple ACi curves run multiple light intensities. Output GammaStar respiration negative output respiration positive indicate issues (.e. leaks) gas exchange measurements. GammaStar output umol mol-1, respiration output umol m-2 s-1 respiratory flux. Output list containing slope intercept regression model, graph fit, estimates coefficients. NOTE: using C_i, output value technically C_istar. need use Cc get GammaStar. Also note, however, convention field completely ignore note. fit_r_light_yin estimates light respiration according Yin et al. (2009, 2011) modifications Kok method. modification uses fluorescence data get better estimate light respiration. Note respiration output negative denote efflux CO2.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimating light respiration — fit_r_light_kok","text":"Kok B. 1956. inhibition photosynthesis intense light. Biochimica et Biophysica Acta 21: 234–244 Walker BJ, Ort DR. 2015. Improved method measuring apparent CO2 photocompensation point resolves impact multiple internal conductances CO2 net gas exchange. Plant Cell Environ 38:2462- 2474 Yin X, Struik PC, Romero P, Harbinson J, Evers JB, van der Putten PEL, Vos J. 2009. Using combined measurements gas exchange chlorophyll fluorescence estimate parameters biochemical C3 photosynthesis model: critical appraisal new integrated approach applied leaves wheat (Triticum aestivum) canopy. Plant Cell Environ 32:448-464 Yin X, Sun Z, Struik PC, Gu J. 2011. Evaluating new method estimate rate leaf respiration light analysis combined gas exchange chlorophyll fluorescence measurements. Journal Experimental Botany 62: 3489–3499","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating light respiration — fit_r_light_kok","text":"","code":"# \\donttest{ # FITTING KOK METHOD # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data = read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Fit light respiration with Kok method r_light = fit_r_light_kok(   data = data,   varnames = list(     A_net = \"A\",     PPFD = \"Qin\"   ),   PPFD_lower = 20,   PPFD_upper = 150 ) #> Warning: `fit_r_light_kok()` was deprecated in photosynthesis 2.1.1. #> ℹ Please use the `.model` argument of `fit_r_light2()` instead. # Return r_light r_light #> (Intercept)  #>  -0.5237011   # FITTING WALKER-ORT METHOD # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data = read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Fit the Walker-Ort method for GammaStar and light respiration walker_ort = fit_r_light_WalkerOrt(data,   varnames = list(     A_net = \"A\",     C_i = \"Ci\",     PPFD = \"Qin\"   ) ) #> Warning: `fit_r_light_WalkerOrt()` was deprecated in photosynthesis 2.1.1. #> ℹ Please use the `.model` argument of `fit_r_light2()` instead. # Extract model summary(walker_ort[[1]]) #>  #> Call: #> lm(formula = Intercept ~ Slope, data = coefs) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.36114 -0.10958 -0.05553  0.08166  0.62016  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  -0.1526     0.1176  -1.297    0.224     #> Slope        -4.6004     0.4069 -11.307  5.1e-07 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2513 on 10 degrees of freedom #> Multiple R-squared:  0.9275,\tAdjusted R-squared:  0.9202  #> F-statistic: 127.8 on 1 and 10 DF,  p-value: 5.103e-07 #>   # View graph walker_ort[[2]] #> `geom_smooth()` using formula = 'y ~ x'   # View coefficients walker_ort[[3]] #>       GammaStar   r_light #> Slope  46.00427 -0.152643  # FITTING THE YIN METHOD # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data = read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Fit light respiration with Yin method r_light = fit_r_light_yin(   data = data,   varnames = list(     A_net = \"A\",     PPFD = \"Qin\",     phi_PSII = \"PhiPS2\"   ),   PPFD_lower = 20,   PPFD_upper = 250 ) #> Warning: `fit_r_light_yin()` was deprecated in photosynthesis 2.1.1. #> ℹ Please use the `.model` argument of `fit_r_light2()` instead. # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light2.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit models to estimate light respiration (\\(R_\\mathrm{d}\\)) — fit_r_light2","title":"Fit models to estimate light respiration (\\(R_\\mathrm{d}\\)) — fit_r_light2","text":"recommend using fit_photosynthesis() argument .photo_fun = \"r_light\" rather calling function directly.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit models to estimate light respiration (\\(R_\\mathrm{d}\\)) — fit_r_light2","text":"","code":"fit_r_light2(   .data,   .model = \"default\",   .method = \"ls\",   Q_lower = NA,   Q_upper = NA,   Q_levels = NULL,   C_upper = NA,   quiet = FALSE,   brm_options = NULL )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit models to estimate light respiration (\\(R_\\mathrm{d}\\)) — fit_r_light2","text":".data data frame containing plant ecophysiological data. See required_variables() variables required model. .model character string model name use. See get_all_models(). .method character string statistical method use: 'ls' least-squares 'brms' Bayesian model using brms::brm(). Default 'ls'. Q_lower Lower light intensity limit estimating Rd using kok_1956 yin_etal_2011 models. Q_upper Upper light intensity limit estimating Rd using kok_1956 yin_etal_2011 models Q_levels numeric vector light intensity levels (\\(\\mu\\)mol / mol) estimating \\(R_\\mathrm{d}\\) linear region -C curve using walker_ort_2015 model. C_upper Upper C (\\(\\mu\\)mol / mol) limit estimating \\(R_\\mathrm{d}\\) linear region -C curve using walker_ort_2015 model. quiet Flag. messages suppressed? Default FALSE. brm_options list options passed brms::brm() .method = \"brms\". Default NULL.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit models to estimate light respiration (\\(R_\\mathrm{d}\\)) — fit_r_light2","text":".method = 'ls': stats::nls() stats::lm() object. .method = 'brms': brms::brmsfit() object.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit models to estimate light respiration (\\(R_\\mathrm{d}\\)) — fit_r_light2","text":"Confusingly, \\(R_\\mathrm{d}\\) typically denotes respiration light, might see \\(R_\\mathrm{day}\\) \\(R_\\mathrm{light}\\). Models Kok (1956) kok_1956 model estimates light respiration using Kok method (Kok, 1956). Kok method involves looking breakpoint light response net CO2 assimilation low light intensities extrapolating data breakpoint estimate light respiration y-intercept. Rd value negative, denoting efflux CO2. Yin et al. (2011) yin_etal_2011 model estimates light respiration according Yin et al. (2009, 2011) modifications Kok method. modification uses fluorescence data get better estimate light respiration. Rd values negative denote efflux CO2. Walker & Ort (2015) walker_ort_2015 model estimates light respiration \\(\\Gamma*\\) according Walker & Ort (2015) using slope- intercept regression method find intercept multiple -C curves run multiple light intensities. method estimates \\(\\Gamma*\\) \\(R_\\mathrm{d}\\). estimated  \\(R_\\mathrm{d}\\) positive indicate issues (.e. leaks) gas exchange measurements. \\(\\Gamma*\\) units umol / mol \\(R_\\mathrm{d}\\) units \\(\\mu\\)mol m\\(^{-2}\\) s\\(^{-1}\\) respiratory flux. using \\(C_\\mathrm{}\\), estimated value technically \\(C_\\mathrm{}\\)*. need use \\(C_\\mathrm{c}\\) get \\(\\Gamma*\\) Also note, however, convention field completely ignore note.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit models to estimate light respiration (\\(R_\\mathrm{d}\\)) — fit_r_light2","text":"Kok B. 1956. inhibition photosynthesis intense light. Biochimica et Biophysica Acta 21: 234–244 Walker BJ, Ort DR. 2015. Improved method measuring apparent CO2 photocompensation point resolves impact multiple internal conductances CO2 net gas exchange. Plant Cell Environ 38:2462- 2474 Yin X, Struik PC, Romero P, Harbinson J, Evers JB, van der Putten PEL, Vos J. 2009. Using combined measurements gas exchange chlorophyll fluorescence estimate parameters biochemical C3 photosynthesis model: critical appraisal new integrated approach applied leaves wheat (Triticum aestivum) canopy. Plant Cell Environ 32:448-464 Yin X, Sun Z, Struik PC, Gu J. 2011. Evaluating new method estimate rate leaf respiration light analysis combined gas exchange chlorophyll fluorescence measurements. Journal Experimental Botany 62: 3489–3499","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_r_light2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit models to estimate light respiration (\\(R_\\mathrm{d}\\)) — fit_r_light2","text":"","code":"# \\donttest{  # Walker & Ort (2015) model  library(broom) library(dplyr) library(photosynthesis)  acq_data = system.file(\"extdata\", \"A_Ci_Q_data_1.csv\", package = \"photosynthesis\") |>    read.csv()  fit = fit_photosynthesis(   .data = acq_data,   .photo_fun = \"r_light\",   .model = \"walker_ort_2015\",   .vars = list(.A = A, .Q = Qin, .C = Ci),   C_upper = 300,   # Irradiance levels used in experiment   Q_levels =  c(1500, 750, 375, 125, 100, 75, 50, 25), )  # The 'fit' object inherits class 'lm' and many methods can be used  ## Model summary: summary(fit) #>  #> Call: #> lm(formula = `(Intercept)` ~ gamma_star, data = .) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.218920 -0.136553  0.007685  0.117016  0.249953  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  -0.1949     0.1002  -1.945   0.0998 .   #> gamma_star   44.3113     3.2518  13.627  9.7e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1738 on 6 degrees of freedom #> Multiple R-squared:  0.9687,\tAdjusted R-squared:  0.9635  #> F-statistic: 185.7 on 1 and 6 DF,  p-value: 9.698e-06 #>   ## Estimated parameters: coef(fit) #> (Intercept)  gamma_star  #>    -0.19485    44.31131   ## 95% confidence intervals: ## n.b. these confidence intervals are not correct because the regression is fit  ## sequentially. It ignores the underlying data and uncertainty in estimates of  ## slopes and intercepts with each A-C curve. Use '.method = \"brms\"' to properly  ## calculate uncertainty.  confint(fit) #>                  2.5 %      97.5 % #> (Intercept) -0.4400221  0.05032205 #> gamma_star  36.3544139 52.26820542  ## Tidy summary table using 'broom::tidy()' tidy(fit, conf.int = TRUE, conf.level = 0.95) #> # A tibble: 2 × 7 #>   term        estimate std.error statistic    p.value conf.low conf.high #>   <chr>          <dbl>     <dbl>     <dbl>      <dbl>    <dbl>     <dbl> #> 1 (Intercept)   -0.195     0.100     -1.94 0.0998       -0.440    0.0503 #> 2 gamma_star    44.3       3.25      13.6  0.00000970   36.4     52.3     ## Calculate residual sum-of-squares sum(resid(fit)^2) #> [1] 0.1812764  # Yin et al. (2011) model  fit = fit_photosynthesis(   .data = acq_data,   .photo_fun = \"r_light\",   .model = \"yin_etal_2011\",   .vars = list(.A = A, .phiPSII = PhiPS2, .Q = Qin),   Q_lower = 20,   Q_upper = 250 )  # The 'fit' object inherits class 'lm' and many methods can be used  ## Model summary: summary(fit) #>  #> Call: #> lm(formula = .A ~ x_var, data = .) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.8587 -0.4493  0.2041  0.7420  2.2232  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.77214    0.39419  -1.959   0.0549 .   #> x_var        0.22661    0.02739   8.274 2.13e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.253 on 58 degrees of freedom #> Multiple R-squared:  0.5414,\tAdjusted R-squared:  0.5335  #> F-statistic: 68.46 on 1 and 58 DF,  p-value: 2.129e-11 #>   ## Estimated parameters: coef(fit) #> (Intercept)       x_var  #>  -0.7721399   0.2266078   ## 95% confidence intervals: confint(fit) #>                  2.5 %     97.5 % #> (Intercept) -1.5611923 0.01691245 #> x_var        0.1717862 0.28142935  ## Tidy summary table using 'broom::tidy()' tidy(fit, conf.int = TRUE, conf.level = 0.95) #> # A tibble: 2 × 7 #>   term        estimate std.error statistic  p.value conf.low conf.high #>   <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> #> 1 (Intercept)   -0.772    0.394      -1.96 5.49e- 2   -1.56     0.0169 #> 2 x_var          0.227    0.0274      8.27 2.13e-11    0.172    0.281   ## Calculate residual sum-of-squares sum(resid(fit)^2) #> [1] 91.04856  # Kok (1956) model  fit = fit_photosynthesis(   .data = acq_data,   .photo_fun = \"r_light\",   .model = \"kok_1956\",   .vars = list(.A = A, .Q = Qin),   Q_lower = 20,   Q_upper = 150 )  # The 'fit' object inherits class 'lm' and many methods can be used  ## Model summary: summary(fit) #>  #> Call: #> lm(formula = .A ~ .Q, data = .) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.1759 -0.4492  0.2077  0.6613  2.3544  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.523701   0.396419  -1.321    0.192     #> .Q           0.036347   0.004781   7.602 2.85e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.309 on 58 degrees of freedom #> Multiple R-squared:  0.4991,\tAdjusted R-squared:  0.4905  #> F-statistic: 57.79 on 1 and 58 DF,  p-value: 2.851e-10 #>   ## Estimated parameters: coef(fit) #> (Intercept)          .Q  #> -0.52370105  0.03634651   ## 95% confidence intervals: confint(fit) #>                  2.5 %     97.5 % #> (Intercept) -1.3172199 0.26981784 #> .Q           0.0267761 0.04591691  ## Tidy summary table using 'broom::tidy()' tidy(fit, conf.int = TRUE, conf.level = 0.95) #> # A tibble: 2 × 7 #>   term        estimate std.error statistic  p.value conf.low conf.high #>   <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> #> 1 (Intercept)  -0.524    0.396       -1.32 1.92e- 1  -1.32      0.270  #> 2 .Q            0.0363   0.00478      7.60 2.85e-10   0.0268    0.0459  ## Calculate residual sum-of-squares sum(resid(fit)^2) #> [1] 99.4385  # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_t_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting temperature responses — fit_t_response","title":"Fitting temperature responses — fit_t_response","text":"Fitting temperature responses","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_t_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting temperature responses — fit_t_response","text":"","code":"fit_t_response(   data,   varnames = list(Par = \"Par\", T_leaf = \"T_leaf\"),   model = c(\"Arrhenius\", \"Kruse\", \"Heskel\", \"Medlyn\", \"MMRT\", \"Quadratic\", \"Topt\"),   start = list(a = 1, b = 1, c = 1, dEa = 1, Ea_ref = 1, Par_ref = 1, Ea = 40000, Par25 =     50, Hd = 2e+05, dS = 650, dCp = 1, dG = 1, dH = 1),   setvar = \"none\",   hdset = 2e+05,   dSset = 650,   title = NULL,   ... )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_t_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting temperature responses — fit_t_response","text":"data Dataframe temperature response variables varnames Variable names, Par parameter interest, T_leaf leaf temperature K. model temperature response model want use? Defaults : Arrhenius, Heskel, Kruse, Medlyn, MMRT, Quadratic, Topt. start List starting parameters nls model fits. , b, c needed Heskel model, dEa, Ea_ref, Par_ref needed Kruse model, Ea, Par25, Hd needed Medlyn Topt models Medlyn model also requires dS, dCP, dG, dH MMRT model. setvar variable set constant Medlyn model? Defaults \"none\", \"Hd\" \"dS\" options available. hdset value Hd set setvar = \"Hd\"? Specify J/mol. dSset value dS set setvar = \"dS\"? Specify J/mol/K. title Title output graphs ... arguments pass nlsLM() function","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_t_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting temperature responses — fit_t_response","text":"fit_t_response fits one temperature response models dataset, returning list lists. parent list contains models, child list model contains fitted model element 1, coefficients element 2, graph element 3.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_t_response.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting temperature responses — fit_t_response","text":"Arrhenius S. 1915. Quantitative laws biological chemistry. Bell. Heskel MA, O'Sullivan OS, Reich PB, Tjoelker MG, Weerasinghe LK, Penillard , Egerton JJG, Creek D, Bloomfield KJ, Xiang J, Sinca F, Stangl ZR, la Torre , Griffin KL, Huntingford C, Hurry V, Meir P, Turnbull MH, Atkin OK. 2016. Convergence temperature response leaf respiration across biomes plant functional types. PNAS 113:3832-3837 Hobbs JK, Jiao W, Easter AD, Parker EJ, Schipper LA, Arcus VL. 2013. Change heat capacity enzyme catalysis determines temperature dependence enzyme catalyzed rates. ACS Chemical Biology 8:2388-2393. Kruse J, Adams MA. 2008. Three parameters comprehensively describe temperature response respiratory oxygen reduction. Plant Cell Environ 31:954-967 Liang LL, Arcus VL, Heskel MA, O'Sullivan OS, Weerasinghe LK, Creek D, Egerton JJG, Tjoelker MG, Atkin OK, Schipper LA. 2018. Macromolecular rate theory (MMRT) provides thermodynamics rationale underpin convergent temperature response plant leaf respiration. Glob Chang Biol 24:1538-1547 Medlyn , Dreyer E, Ellsworth D, Forstreuter M, Harley PC, Kirschbaum MUF, Le Roux X, Montpied P, Strassemeyer J, Walcroft , Wang K, Loutstau D. 2002. Temperature response parameters biochemically based model photosynthesis. II. review experimental data. Plant Cell Environ 25:1167-1179","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/fit_t_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting temperature responses — fit_t_response","text":"","code":"# \\donttest{ # Read in data data <- read.csv(system.file(\"extdata\", \"A_Ci_T_data.csv\",   package = \"photosynthesis\" ), stringsAsFactors = FALSE )  library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  # Round temperatures to group them appropriately # Use sequential rounding data$T2 <- round(data$Tleaf, 1) data$T2 <- round(data$Tleaf, 0)  # Look at unique values to detect rounding issues unique(data$T2) #>  [1] 17 18 20 22 23 25 28 27 30 33 32 35 37 38 40  # Some still did not round correctly, # manually correct for (i in 1:nrow(data)) {   if (data$T2[i] == 18) {     data$T2[i] <- 17   }   if (data$T2[i] == 23) {     data$T2[i] <- 22   }   if (data$T2[i] == 28) {     data$T2[i] <- 27   }   if (data$T2[i] == 33) {     data$T2[i] <- 32   }   if (data$T2[i] == 38) {     data$T2[i] <- 37   } }  # Make sure it is a character string for grouping data$T2 <- as.character(data$T2)  # Create grouping variable by ID and measurement temperature data <- unite(data,   col = \"ID2\", c(\"ID\", \"T2\"),   sep = \"_\" )  # Split by temperature group data <- split(data, data$ID2)  # Obtain mean temperature for group so temperature # response fitting is acceptable later, round to # 2 decimal places for (i in 1:length(data)) {   data[[i]]$Curve_Tleaf <- round(mean(data[[i]]$Tleaf), 2) }  # Convert from list back to dataframe data <- do.call(\"rbind\", data)  # Parse grouping variable by ID and measurement temperature data <- separate(data,   col = \"ID2\", into = c(\"ID\", \"T2\"),   sep = \"_\" )  # Make sure number of values matches number of measurement # temperatures. May vary slightly if plants had slightly # different leaf temperatures during the measurements unique(data$Curve_Tleaf) #>  [1] 17.51 20.01 22.50 25.01 27.51 30.01 32.50 34.99 37.50 39.99 20.00 22.51 #> [13] 25.02 40.01  # Create ID column to curve fit by ID and temperature data <- unite(data,   col = \"ID2\", c(\"ID\", \"Curve_Tleaf\"),   sep = \"_\" )  # Convert leaf temperature to K data$T_leaf <- data$Tleaf + 273.15  # Fit many CO2 response curves fits2 <- fit_many(   data = data,   group = \"ID2\",   varnames = list(     A_net = \"A\",     C_i = \"Ci\",     T_leaf = \"T_leaf\",     PPFD = \"Qin\",     g_mc = \"g_mc\"   ),   funct = fit_aci_response,   alphag = 0 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |====                                                                  |   5%   |                                                                               |=======                                                               |  10%   |                                                                               |==========                                                            |  15%   |                                                                               |==============                                                        |  20%   |                                                                               |==================                                                    |  25%   |                                                                               |=====================                                                 |  30%   |                                                                               |========================                                              |  35%   |                                                                               |============================                                          |  40%   |                                                                               |================================                                      |  45%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================                                |  55%   |                                                                               |==========================================                            |  60%   |                                                                               |==============================================                        |  65%   |                                                                               |=================================================                     |  70%   |                                                                               |====================================================                  |  75%   |                                                                               |========================================================              |  80%   |                                                                               |============================================================          |  85%   |                                                                               |===============================================================       |  90%   |                                                                               |==================================================================    |  95%   |                                                                               |======================================================================| 100%  # Extract ACi parameters pars <- compile_data(fits2,   output_type = \"dataframe\",   list_element = 1 )  # Extract ACi graphs graphs <- compile_data(fits2,   output_type = \"list\",   list_element = 2 )  # Parse the ID variable pars <- separate(pars, col = \"ID\", into = c(\"ID\", \"Curve_Tleaf\"), sep = \"_\")  # Make sure curve leaf temperature is numeric pars$Curve_Tleaf <- as.numeric(pars$Curve_Tleaf) pars$T_leaf <- pars$Curve_Tleaf + 273.15  # Fit all models, set Hd to constant in Medlyn model out <- fit_t_response(   data = pars[pars$ID == \"S2\", ],   varnames = list(     Par = \"V_cmax\",     T_leaf = \"T_leaf\"   ),   setvar = \"Hd\",   hdset = 200000 ) #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion  out[[\"Arrhenius\"]][[\"Graph\"]]  out[[\"Heskel\"]][[\"Graph\"]]  out[[\"Kruse\"]][[\"Graph\"]]  out[[\"Medlyn\"]][[\"Graph\"]]  out[[\"MMRT\"]][[\"Graph\"]]  out[[\"Quadratic\"]][[\"Graph\"]]  out[[\"Topt\"]][[\"Graph\"]]  # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/gs_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Stomatal conductance models — gs_mod_ballberry","title":"Stomatal conductance models — gs_mod_ballberry","text":"Stomatal conductance models","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/gs_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stomatal conductance models — gs_mod_ballberry","text":"","code":"gs_mod_ballberry(A_net, C_air, RH)  gs_mod_leuning(A_net, C_air, D0, VPD)  gs_mod_opti(g0, g1, VPD, A_net, C_air)  gs_mod_optifull(g0, g1, gk, VPD, A_net, C_air)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/gs_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stomatal conductance models — gs_mod_ballberry","text":"A_net Net CO2 assimilation umol m-2 s-1 C_air CO2 concentration leaf surface umol mol-1 RH Relative humidity proportion D0 Vapor pressure sensitivity stomata (Leuning 1995) VPD Vapor pressure deficit (kPa) g0 Optimization model intercept term (Medlyn et al. 2011) g1 Optimization model slope term (Medlyn et al. 2011) gk Optimization model root term (Medlyn et al. 2011)","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/gs_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stomatal conductance models — gs_mod_ballberry","text":"gs_mod_ballberry used fitting Ball et al. (1987) model stomatal conductance gs_mod_leuning used fitting Leuning (1995) model stomatal conductance gs_mod_opti fits optimal stomatal conductance model according Medlyn et al. 2011 gs_mod_optifull fits full optimal stomatal conductance model according Medlyn et al. 2011","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/gs_models.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stomatal conductance models — gs_mod_ballberry","text":"Ball JT, Woodrow IE, Berry JA. 1987. model predicting stomatal conductance contribution control photosynthesis different environmental conditions, Progress Photosynthesis Research, Proceedings VII International Congress Photosynthesis, vol. 4, edited . Biggins, pp. 221–224, Martinus Nijhoff, Dordrecht, Netherlands. Leuning R. 1995. critical appraisal coupled stomatal- photosynthesis model C3 plants. Plant Cell Environ 18:339-357 Medlyn , Duursma RA, Eamus D, Ellsworth DS, Prentice IC, Barton CVM, Crous KY, Angelis PD, Freeman M, Wingate L. 2011. Reconciling optimal empirical approaches modeling stomatal conductance. Glob Chang Biol 17:2134-2144","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/j_calculations.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse non-rectangular hyperbola for J_max calculation — calculate_jmax","title":"Inverse non-rectangular hyperbola for J_max calculation — calculate_jmax","text":"Inverse non-rectangular hyperbola J_max calculation","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/j_calculations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse non-rectangular hyperbola for J_max calculation — calculate_jmax","text":"","code":"calculate_jmax(PPFD, alpha, J, theta_J)  calculate_j(PPFD, alpha, J_max, theta_J)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/j_calculations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse non-rectangular hyperbola for J_max calculation — calculate_jmax","text":"PPFD light intensity umol m-2 s-1 alpha initial slope light response J electron transport rate umol m-2 s-1 theta_J curvature light response J_max maximum rate electron transport umol m-2 s-1","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/j_calculations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse non-rectangular hyperbola for J_max calculation — calculate_jmax","text":"calculate_jmax calculates J_max given PPFD J. necessary electron transport component fit_aci_response function. calculate_j provides model light response J. necessary fitting electron transport component photosynthetic CO2 response curves fit_aci_response.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/leaf_par.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 class leaf_par — leaf_par","title":"S3 class leaf_par — leaf_par","text":"S3 class leaf_par","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/leaf_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 class leaf_par — leaf_par","text":"","code":"leaf_par(.x, use_tealeaves)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/leaf_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 class leaf_par — leaf_par","text":".x list constructed leaf_par. use_tealeaves Logical. leaf energy balance used calculate leaf temperature (T_leaf)? TRUE, tleaf() calculates T_leaf. FALSE, user-defined T_leaf used. Additional parameters constants required, see make_parameters().","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/leaf_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 class leaf_par — leaf_par","text":"Constructor function leaf_par class. function ensures leaf parameter inputs properly formatted.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/make_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Make lists of parameters for photosynthesis — make_parameters","title":"Make lists of parameters for photosynthesis — make_parameters","text":"Make lists parameters photosynthesis make_leafpar make_enviropar make_bakepar make_constants","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/make_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make lists of parameters for photosynthesis — make_parameters","text":"","code":"make_leafpar(replace = NULL, use_tealeaves)  make_enviropar(replace = NULL, use_tealeaves)  make_bakepar(replace = NULL)  make_constants(replace = NULL, use_tealeaves)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/make_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make lists of parameters for photosynthesis — make_parameters","text":"replace named list parameters replace defaults. NULL, defaults used. use_tealeaves Logical. leaf energy balance used calculate leaf temperature (T_leaf)? TRUE, tleaf() calculates T_leaf. FALSE, user-defined T_leaf used. Additional parameters constants required, see make_parameters().","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/make_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make lists of parameters for photosynthesis — make_parameters","text":"make_leafpar: object inheriting class leaf_par()make_enviropar: object inheriting class enviro_par()make_bakepar: object inheriting class bake_par()make_constants: object inheriting class constants()","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/make_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make lists of parameters for photosynthesis — make_parameters","text":"Constants: Baking (.e. temperature response) parameters: Environment parameters: Leaf parameters: use_tealeaves = TRUE, additional parameters : Constants: Baking (.e. temperature response) parameters: Environment parameters: Leaf parameters: Optional leaf parameters:","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/make_parameters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make lists of parameters for photosynthesis — make_parameters","text":"Buckley TN Diaz-Espejo . 2015. Partitioning changes photosynthetic rate contributions different variables. Plant, Cell & Environment 38: 1200-11.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/make_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make lists of parameters for photosynthesis — make_parameters","text":"","code":"bake_par = make_bakepar() constants = make_constants(use_tealeaves = FALSE) enviro_par = make_enviropar(use_tealeaves = FALSE) leaf_par = make_leafpar(use_tealeaves = FALSE)  leaf_par = make_leafpar(   replace = list(     g_sc = set_units(0.3, mol / m^2 / s),     V_cmax25 = set_units(100, umol / m^2 / s)   ), use_tealeaves = FALSE )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/models.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default model — get_default_model","title":"Get default model — get_default_model","text":"Get name default model used different plant ecophysiological data analysis methods implemented photosynthesis. Currently used fit_aq_response2() fit_r_light2(). Light response models: marshall_biscoe_1980(): Non-rectangular hyperbolic model light responses photoinhibition(): Non-rectangular hyperbolic model light responses photoinhibition k_sat increasing Q_abs","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default model — get_default_model","text":"","code":"get_default_model(.photo_fun)  get_all_models(method)  marshall_biscoe_1980(Q_abs, k_sat, phi_J, theta_J)  photoinhibition(Q_abs, k_sat, phi_J, theta_J, b_inh)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default model — get_default_model","text":".photo_fun character string photosynthesis function call. One : aq_response, r_light. method character string statistical method use: 'ls' least-squares 'brms' Bayesian model using brms::brm(). Default 'ls'. Q_abs Absorbed light intensity (\\(\\mu\\)mol m\\(^{-2}\\) s\\(^{-1}\\)) k_sat Light saturated rate process k phi_J Quantum efficiency process k theta_J Curvature light response b_inh Inhibition parameter","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default model — get_default_model","text":"character string name model.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default model — get_default_model","text":"","code":"get_default_model(\"aq_response\") #> [1] \"marshall_biscoe_1980\" get_default_model(\"r_light\") #> [1] \"walker_ort_2015\""},{"path":"https://github.com/cdmuir/photosynthesis/reference/parameter_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get vector of parameter names — parameter_names","title":"Get vector of parameter names — parameter_names","text":"Get vector parameter names","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/parameter_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get vector of parameter names — parameter_names","text":"","code":"parameter_names(which, use_tealeaves)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/parameter_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get vector of parameter names — parameter_names","text":"character string indicating parameter names retrieve: \"leaf\", \"enviro\", \"bake\", \"constants\". Partial matching allowed. use_tealeaves Logical. leaf energy balance used calculate leaf temperature (T_leaf)? TRUE, tleaf() calculates T_leaf. FALSE, user-defined T_leaf used. Additional parameters constants required, see make_parameters().","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/parameter_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get vector of parameter names — parameter_names","text":"character vector parameter names associated type, \"leaf\", \"enviro\", \"bake\", \"constants\".","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/parameter_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get vector of parameter names — parameter_names","text":"","code":"parameter_names(\"leaf\", use_tealeaves = FALSE) #>  [1] \"A_mes_A\"         \"J_max25\"         \"K_C25\"           \"K_O25\"           #>  [5] \"R_d25\"           \"T_leaf\"          \"V_cmax25\"        \"V_tpu25\"         #>  [9] \"delta_ias_lower\" \"delta_ias_upper\" \"g_liqc25\"        \"g_mc25\"          #> [13] \"g_sc\"            \"g_uc\"            \"gamma_star25\"    \"k_mc\"            #> [17] \"k_sc\"            \"k_uc\"            \"leafsize\"        \"phi_J\"           #> [21] \"theta_J\""},{"path":"https://github.com/cdmuir/photosynthesis/reference/photo_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Input parameters to simulate C3 photosynthesis using photosynthesis() — photo_parameters","title":"Input parameters to simulate C3 photosynthesis using photosynthesis() — photo_parameters","text":"table input parameters used photosynthesis()","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/photo_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input parameters to simulate C3 photosynthesis using photosynthesis() — photo_parameters","text":"","code":"photo_parameters"},{"path":[]},{"path":"https://github.com/cdmuir/photosynthesis/reference/photo_parameters.html","id":"photo-parameters","dir":"Reference","previous_headings":"","what":"photo_parameters","title":"Input parameters to simulate C3 photosynthesis using photosynthesis() — photo_parameters","text":"data frame 73 rows 11  columns: country Country name iso2, iso3 2 & 3 letter ISO country codes year Year","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/photo_parameters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Input parameters to simulate C3 photosynthesis using photosynthesis() — photo_parameters","text":"https://www..int/teams/global-tuberculosis-programme/data","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/photosynthesis-package.html","id":null,"dir":"Reference","previous_headings":"","what":"photosynthesis package — photosynthesis-package","title":"photosynthesis package — photosynthesis-package","text":"Tools Plant Ecophysiology & Modeling","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/photosynthesis-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"photosynthesis package — photosynthesis-package","text":"See README GitHub","code":""},{"path":[]},{"path":"https://github.com/cdmuir/photosynthesis/reference/photosynthesis-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"photosynthesis package — photosynthesis-package","text":"Maintainer: Chris Muir cdmuir@wisc.edu (ORCID) Authors: Joseph Stinziano josephstinziano@gmail.com (ORCID) Cassaundra Roback croback@unm.edu Demi Sargent d.sargent@westernsydney.edu.au Bridget Murphy bridget.murphy@mail.utoronto.ca Patrick Hudson hudson.patrick.j@gmail.com [data contributor]","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/photosynthesis.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate C3 photosynthesis — photosynthesis","title":"Simulate C3 photosynthesis — photosynthesis","text":"photosynthesis: simulate C3 photosynthesis multiple parameter sets photo: simulate C3 photosynthesis single parameter set","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/photosynthesis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate C3 photosynthesis — photosynthesis","text":"","code":"photosynthesis(   leaf_par,   enviro_par,   bake_par,   constants,   use_tealeaves,   progress = TRUE,   quiet = FALSE,   assert_units = TRUE,   check = TRUE,   parallel = FALSE,   use_legacy_version = FALSE )  photo(   leaf_par,   enviro_par,   bake_par,   constants,   use_tealeaves,   quiet = FALSE,   assert_units = TRUE,   check = TRUE,   prepare_for_tleaf = use_tealeaves,   use_legacy_version = FALSE )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/photosynthesis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate C3 photosynthesis — photosynthesis","text":"leaf_par list leaf parameters inheriting class leaf_par. can generated using make_leafpar function. enviro_par list environmental parameters inheriting class enviro_par. can generated using make_enviropar function. bake_par list temperature response parameters inheriting class bake_par. can generated using make_bakepar function. constants list physical constants inheriting class constants. can generated using make_constants function. use_tealeaves Logical. leaf energy balance used calculate leaf temperature (T_leaf)? TRUE, tleaf() calculates T_leaf. FALSE, user-defined T_leaf used. Additional parameters constants required, see make_parameters(). progress Logical. progress bar displayed? quiet Logical. messages displayed? assert_units Logical. parameter units checked? function faster FALSE, input must correct units else results incorrect without warning. check Logical. arguments checks done? intended disabled photo() called photosynthesis() Default TRUE. parallel Logical. parallel processing used via furrr::future_map()? use_legacy_version Logical. legacy model (<2.1.0) used? See NEWS information. Default FALSE. prepare_for_tleaf Logical. arguments additional calculations tleaf()? intended disabled photo() called photosynthesis(). Default use_tealeaves.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/photosynthesis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate C3 photosynthesis — photosynthesis","text":"data.frame following units columns Inputs: Baked Inputs:","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/photosynthesis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate C3 photosynthesis — photosynthesis","text":"photo: function takes simulates photosynthetic rate using Farquhar-von Caemmerer-Berry (FvCB()) model C3 photosynthesis single combined set leaf parameters (leaf_par()), environmental parameters (enviro_par()), physical constants (constants()). Leaf parameters provided reference temperature (25 °C) \"baked\" appropriate leaf temperature using temperature response functions (see bake()). photosynthesis: function uses photo simulate photosynthesis multiple parameter sets generated using cross_df().","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/photosynthesis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate C3 photosynthesis — photosynthesis","text":"","code":"# Single parameter set with 'photo'  bake_par = make_bakepar() constants = make_constants(use_tealeaves = FALSE) enviro_par = make_enviropar(use_tealeaves = FALSE) leaf_par = make_leafpar(use_tealeaves = FALSE) photo(leaf_par, enviro_par, bake_par, constants,   use_tealeaves = FALSE ) #>  #>              #>   As of version 2.1.0, the CO2 conductance model changed slightly.  #>   To implement legacy version, use: #>    #>   `> photosynthesis(..., use_legacy_version = TRUE)`. #>  #> Solving for C_chl ... #>  done #>                 C_chl         value convergence                  g_tc #> 1 258.1218 [umol/mol] -1.363227e-06           0 0.1726157 [mol/m^2/s] #>                       A            J_max          J_max25              K_C #> 1 27.94273 [umol/m^2/s] 200 [umol/m^2/s] 200 [umol/m^2/s] 268.3 [umol/mol] #>              K_C25                 K_O               K_O25            R_d #> 1 268.3 [umol/mol] 165084.2 [umol/mol] 165084.2 [umol/mol] 2 [umol/m^2/s] #>            R_d25     T_leaf           V_cmax         V_cmax25            V_tpu #> 1 2 [umol/m^2/s] 298.15 [K] 150 [umol/m^2/s] 150 [umol/m^2/s] 200 [umol/m^2/s] #>            V_tpu25            g_mc          g_mc25            g_sc #> 1 200 [umol/m^2/s] 0.4 [mol/m^2/s] 0.4 [mol/m^2/s] 0.4 [mol/m^2/s] #>               g_uc         gamma_star       gamma_star25  k_mc  k_sc  k_uc #> 1 0.01 [mol/m^2/s] 37.9258 [umol/mol] 37.9258 [umol/mol] 1 [1] 1 [1] 1 [1] #>   leafsize     phi_J   theta_J          C_air              O              P #> 1  0.1 [m] 0.331 [1] 0.825 [1] 420 [umol/mol] 0.21 [mol/mol] 101.3246 [kPa] #>                PPFD      RH    wind          Ds_Jmax           Ds_gmc #> 1 1500 [umol/m^2/s] 0.5 [1] 2 [m/s] 388.04 [J/K/mol] 487.29 [J/K/mol] #>            Ea_Jmax            Ea_KC            Ea_KO            Ea_Rd #> 1 56095.18 [J/mol] 80989.78 [J/mol] 23719.97 [J/mol] 40446.75 [J/mol] #>           Ea_Vcmax          Ea_Vtpu     Ea_gammastar           Ea_gmc #> 1 52245.78 [J/mol] 52245.78 [J/mol] 24459.97 [J/mol] 68901.56 [J/mol] #>            Ed_Jmax           Ed_gmc             D_c0            D_h0 #> 1 121244.8 [J/mol] 148788.6 [J/mol] 1.29e-05 [m^2/s] 1.9e-05 [m^2/s] #>               D_m0             D_w0           G                 R       eT #> 1 1.33e-05 [m^2/s] 2.12e-05 [m^2/s] 9.8 [m/s^2] 8.31446 [J/K/mol] 1.75 [1] #>     epsilon                sigma                 C_i #> 1 0.622 [1] 5.67e-08 [W/K^4/m^2] 350.1432 [umol/mol]  # Multiple parameter sets with 'photosynthesis'  leaf_par = make_leafpar(   replace = list(     T_leaf = set_units(c(293.14, 298.15), \"K\")   ), use_tealeaves = FALSE ) photosynthesis(leaf_par, enviro_par, bake_par, constants,   use_tealeaves = FALSE ) #>  #>              #>   As of version 2.1.0, the CO2 conductance model changed slightly.  #>   To implement legacy version, use: #>    #>   `> photosynthesis(..., use_legacy_version = TRUE)`. #> Solving for photosynthetic rate from 2 parameter sets ... #>                 C_chl         value convergence                  g_tc #> 1 269.8118 [umol/mol] -3.407982e-06           0 0.1498162 [mol/m^2/s] #> 2 258.1218 [umol/mol] -1.363227e-06           0 0.1726157 [mol/m^2/s] #>                       A                 J_max          J_max25 #> 1 22.50062 [umol/m^2/s] 143.6921 [umol/m^2/s] 200 [umol/m^2/s] #> 2 27.94273 [umol/m^2/s] 200.0000 [umol/m^2/s] 200 [umol/m^2/s] #>                  K_C            K_C25                 K_O               K_O25 #> 1 153.505 [umol/mol] 268.3 [umol/mol] 140179.2 [umol/mol] 165084.2 [umol/mol] #> 2 268.300 [umol/mol] 268.3 [umol/mol] 165084.2 [umol/mol] 165084.2 [umol/mol] #>                   R_d          R_d25     T_leaf                V_cmax #> 1 1.5133 [umol/m^2/s] 2 [umol/m^2/s] 293.14 [K] 104.6304 [umol/m^2/s] #> 2 2.0000 [umol/m^2/s] 2 [umol/m^2/s] 298.15 [K] 150.0000 [umol/m^2/s] #>           V_cmax25                 V_tpu          V_tpu25                  g_mc #> 1 150 [umol/m^2/s] 139.5072 [umol/m^2/s] 200 [umol/m^2/s] 0.2844658 [mol/m^2/s] #> 2 150 [umol/m^2/s] 200.0000 [umol/m^2/s] 200 [umol/m^2/s] 0.4000000 [mol/m^2/s] #>            g_mc25            g_sc             g_uc          gamma_star #> 1 0.4 [mol/m^2/s] 0.4 [mol/m^2/s] 0.01 [mol/m^2/s] 32.04034 [umol/mol] #> 2 0.4 [mol/m^2/s] 0.4 [mol/m^2/s] 0.01 [mol/m^2/s] 37.92580 [umol/mol] #>         gamma_star25  k_mc  k_sc  k_uc leafsize     phi_J   theta_J #> 1 37.9258 [umol/mol] 1 [1] 1 [1] 1 [1]  0.1 [m] 0.331 [1] 0.825 [1] #> 2 37.9258 [umol/mol] 1 [1] 1 [1] 1 [1]  0.1 [m] 0.331 [1] 0.825 [1] #>            C_air              O              P              PPFD      RH #> 1 420 [umol/mol] 0.21 [mol/mol] 101.3246 [kPa] 1500 [umol/m^2/s] 0.5 [1] #> 2 420 [umol/mol] 0.21 [mol/mol] 101.3246 [kPa] 1500 [umol/m^2/s] 0.5 [1] #>      wind          Ds_Jmax           Ds_gmc          Ea_Jmax            Ea_KC #> 1 2 [m/s] 388.04 [J/K/mol] 487.29 [J/K/mol] 56095.18 [J/mol] 80989.78 [J/mol] #> 2 2 [m/s] 388.04 [J/K/mol] 487.29 [J/K/mol] 56095.18 [J/mol] 80989.78 [J/mol] #>              Ea_KO            Ea_Rd         Ea_Vcmax          Ea_Vtpu #> 1 23719.97 [J/mol] 40446.75 [J/mol] 52245.78 [J/mol] 52245.78 [J/mol] #> 2 23719.97 [J/mol] 40446.75 [J/mol] 52245.78 [J/mol] 52245.78 [J/mol] #>       Ea_gammastar           Ea_gmc          Ed_Jmax           Ed_gmc #> 1 24459.97 [J/mol] 68901.56 [J/mol] 121244.8 [J/mol] 148788.6 [J/mol] #> 2 24459.97 [J/mol] 68901.56 [J/mol] 121244.8 [J/mol] 148788.6 [J/mol] #>               D_c0            D_h0             D_m0             D_w0 #> 1 1.29e-05 [m^2/s] 1.9e-05 [m^2/s] 1.33e-05 [m^2/s] 2.12e-05 [m^2/s] #> 2 1.29e-05 [m^2/s] 1.9e-05 [m^2/s] 1.33e-05 [m^2/s] 2.12e-05 [m^2/s] #>             G                 R       eT   epsilon                sigma #> 1 9.8 [m/s^2] 8.31446 [J/K/mol] 1.75 [1] 0.622 [1] 5.67e-08 [W/K^4/m^2] #> 2 9.8 [m/s^2] 8.31446 [J/K/mol] 1.75 [1] 0.622 [1] 5.67e-08 [W/K^4/m^2] #>                   C_i #> 1 363.7484 [umol/mol] #> 2 350.1432 [umol/mol]"},{"path":"https://github.com/cdmuir/photosynthesis/reference/ppm2pa.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert pressure from PPM to Pascals — ppm2pa","title":"Convert pressure from PPM to Pascals — ppm2pa","text":"Convert pressure PPM Pascals","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/ppm2pa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert pressure from PPM to Pascals — ppm2pa","text":"","code":"ppm2pa(ppm, P)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/ppm2pa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert pressure from PPM to Pascals — ppm2pa","text":"ppm Pressure value umol/mol class units P Atmospheric pressure value kPa class units","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/ppm2pa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert pressure from PPM to Pascals — ppm2pa","text":"Value Pa class units","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/ppm2pa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert pressure from PPM to Pascals — ppm2pa","text":"$$\\mathrm{Press}(kPa) = \\mathrm{Press}(ppm) P(kPa)$$ $$\\mathrm{Press}(Pa) = 1000 \\mathrm{Press}(kPa)$$","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/ppm2pa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert pressure from PPM to Pascals — ppm2pa","text":"","code":"ppm = set_units(400, \"umol/mol\") P = set_units(101.325, \"kPa\") ppm2pa(ppm, P) #> 40.53 [Pa]"},{"path":"https://github.com/cdmuir/photosynthesis/reference/print_graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing graphs to system — print_graphs","title":"Printing graphs to system — print_graphs","text":"Printing graphs system","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/print_graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing graphs to system — print_graphs","text":"","code":"print_graphs(   data,   path,   output_type = \"jpeg\",   height = 5,   width = 5,   res = 600,   units = \"in\",   pdf_filename,   ... )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/print_graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing graphs to system — print_graphs","text":"data List graphs path File path printing graphs. Use \"./\" set current working directory output_type Type output file, jpeg pdf height Height jpegs width Width jpegs res Resolution jpegs units Units height width pdf_filename Filename pdf option ... arguments jpeg() pdf()","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/print_graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing graphs to system — print_graphs","text":"print_graphs creates graph files current working directory list graphs","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/print_graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing graphs to system — print_graphs","text":"","code":"# \\donttest{ # Read in your data # Note that this data is coming from data supplied by the package # hence the complicated argument in read.csv() # This dataset is a CO2 by light response curve for a single sunflower data <- read.csv(system.file(\"extdata\", \"A_Ci_Q_data_1.csv\",   package = \"photosynthesis\" ))  # Fit many AQ curves # Set your grouping variable # Here we are grouping by CO2_s and individual data$C_s <- (round(data$CO2_s, digits = 0))  # For this example we need to round sequentially due to CO2_s setpoints data$C_s <- as.factor(round(data$C_s, digits = -1))  # To fit one AQ curve fit <- fit_aq_response(data[data$C_s == 600, ],   varnames = list(     A_net = \"A\",     PPFD = \"Qin\"   ) )  # Print model summary summary(fit[[1]]) #>  #> Formula: A_net ~ aq_response(k_sat, phi_J, Q_abs = data$Q_abs, theta_J) -  #>     Rd #>  #> Parameters: #>                 Estimate Std. Error t value Pr(>|t|)     #> k_sat          21.167200   0.158332  133.69 1.88e-08 *** #> phi_J.Q_abs     0.051907   0.001055   49.18 1.02e-06 *** #> theta_J         0.775484   0.014920   51.98 8.20e-07 *** #> Rd.(Intercept)  0.668495   0.065235   10.25 0.000511 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.05535 on 4 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08 #>   # Print fitted parameters fit[[2]] #>         A_sat      phi_J   theta_J        Rd      LCP  resid_SSs #> k_sat 21.1672 0.05190746 0.7754836 0.6684953 12.97289 0.01225491  # Print graph fit[[3]]   # Fit many curves fits <- fit_many(   data = data,   varnames = list(     A_net = \"A\",     PPFD = \"Qin\",     group = \"C_s\"   ),   funct = fit_aq_response,   group = \"C_s\" ) #>    |                                                                               |                                                                      |   0%   |                                                                               |========                                                              |  11%   |                                                                               |================                                                      |  22%   |                                                                               |=======================                                               |  33%   |                                                                               |===============================                                       |  44%   |                                                                               |=======================================                               |  56%   |                                                                               |===============================================                       |  67%   |                                                                               |======================================================                |  78%   |                                                                               |==============================================================        |  89%   |                                                                               |======================================================================| 100%  # Look at model summary for a given fit # First set of double parentheses selects an individual group value # Second set selects an element of the sublist summary(fits[[3]][[1]]) #>  #> Formula: A_net ~ aq_response(k_sat, phi_J, Q_abs = data$Q_abs, theta_J) -  #>     Rd #>  #> Parameters: #>                Estimate Std. Error t value Pr(>|t|)     #> k_sat          7.347423   0.141931  51.768 8.33e-07 *** #> phi_J.Q_abs    0.027192   0.001511  17.994 5.61e-05 *** #> theta_J        0.837778   0.030608  27.371 1.06e-05 *** #> Rd.(Intercept) 0.615283   0.086994   7.073  0.00211 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.06799 on 4 degrees of freedom #>  #> Number of iterations to convergence: 4  #> Achieved convergence tolerance: 1.49e-08 #>   # Print the parameters fits[[3]][[2]] #>          A_sat      phi_J   theta_J        Rd      LCP  resid_SSs #> k_sat 7.347423 0.02719153 0.8377781 0.6152826 22.96322 0.01849038  # Print the graph fits[[3]][[3]]   # Compile graphs into a list for plotting fits_graphs <- compile_data(fits,   list_element = 3 )  # Print graphs to pdf # Uncomment to run # print_graphs(data = fits_graphs, #            output_type = \"pdf\", #            path = tempdir(), #            pdf_filename = \"mygraphs.pdf\") # }"},{"path":"https://github.com/cdmuir/photosynthesis/reference/read_li6800.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a LI-COR file — read_li6800","title":"Read a LI-COR file — read_li6800","text":"longer updating function. Please use read_licor instead.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/read_li6800.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a LI-COR file — read_li6800","text":"","code":"read_li6800(x)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/read_li6800.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a LI-COR file — read_li6800","text":"x File name","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/read_li6800.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a LI-COR file — read_li6800","text":"Returns data.frame raw LI-COR files. Current support LI-COR LI-6800 files .","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/read_licor.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a LI-COR file — read_licor","title":"Read a LI-COR file — read_licor","text":"Reads raw LI-COR LI6800 file, including remarks. function developed using output Bluestem v.2.0.04 v.2.1.08. guarantee backward compatibility earlier versions Bluestem. try update code new versions released, maybe time-lag, inspect results carefully.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/read_licor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a LI-COR file — read_licor","text":"","code":"read_licor(   file,   bluestem_version = get_bluestem_version(file, n_max = 10L),   ... )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/read_licor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a LI-COR file — read_licor","text":"file Path raw LI6800 file bluestem_version Character string Bluestem software version number. default, function try pull version number file. ... Argument passed read_lines","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/read_licor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a LI-COR file — read_licor","text":"Returns tibble raw LI-COR LI6800 files.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/required_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Variables required for photosynthesis models — required_variables","title":"Variables required for photosynthesis models — required_variables","text":"Variables required photosynthesis models","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/required_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variables required for photosynthesis models — required_variables","text":"","code":"required_variables(.model, quiet)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/required_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variables required for photosynthesis models — required_variables","text":".model character string model name use. See get_all_models(). quiet Flag. messages suppressed? Default FALSE.","code":""},{"path":[]},{"path":"https://github.com/cdmuir/photosynthesis/reference/simulate_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate gas exchange data with measurement error — simulate_error","text":"","code":"simulate_error(   ph_out,   chamber_pars,   n = 1L,   use_tealeaves = (\"T_air\" %in% colnames(ph_out)) )"},{"path":"https://github.com/cdmuir/photosynthesis/reference/simulate_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate gas exchange data with measurement error — simulate_error","text":"ph_out data frame output photo() photosynthesis() units. chamber_pars data frame single row chamber parameters. See Note table required parameters. n Integer. Number replicated simulations per row ph_out. use_tealeaves Flag. tealeaves package uses slightly different equation calculate saturating water content air function temperature pressure LI-COR. FALSE, function uses LI-COR's equation LI6800 manual. TRUE, uses tealeaves function internal consistency. function attempts guess whether ph_out run tealeaves, can manually overridden providing value argument.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/simulate_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate gas exchange data with measurement error — simulate_error","text":"data frame n * nrow(ph_out) rows. contains original output ph_out well column .rep indicating replicate number 1 n. new columns assumed measured chamber parameters 'measured' values estimated synthetic data measurement error:","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/simulate_error.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulate gas exchange data with measurement error — simulate_error","text":"required parameters chamber_pars argument : flow [\\(\\mu\\)mol / s]: chamber flow rate leaf_area [cm ^ 2]: leaf area chamber sigma_CO2_s [\\(\\mu\\)mol / mol]: standard deviation sample [CO\\(_2\\)] measurement error sigma_CO2_r [\\(\\mu\\)mol / mol]: standard deviation reference [CO\\(_2\\)] sigma_H2O_s [mmol / mol]: standard deviation sample [H\\(_2\\)O] measurement error sigma_H2O_r [mmol / mol]: standard deviation sample [H\\(_2\\)O] measurement error Units flow leaf_area provided; units implied sigma's necessary specify rnorm() drop units. evaluate accuracy precision parameter estimation methods, may useful simulate data realistic measurement error. function takes output photo() photosynthesis() models, adds measurement error CO\\(_2\\) H\\(_2\\)O concentrations, calculates parameter estimates synthetic data. Currently, function assumes simplified 1-dimensional CO\\(_2\\) H\\(_2\\)O conductance model: zero cuticular conductance, infinite boundary layer conductance, infinite airspace conductance. assumptions include: chamber flow rate, leaf area, leaf temperature, air pressure known without error measurement error normally distributed mean 0 standard deviation specified chamber_pars function designed LI-COR LI6800 instrument mind, principle applies open path gas exchange system. [CO2ibq4GEPEdMeOTR4IAIgxYuB3iZgESFR-5-]: R:CO2ibq4GEPEdMeOTR4IAIgxYuB3iZgESFR-5-%5C","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/simulate_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate gas exchange data with measurement error — simulate_error","text":"","code":"library(photosynthesis)  # Use photosynthesis() to simulate 'real' values # `replace = ...` sets parameters to meet assumptions of `simulate_error()` lp = make_leafpar(replace = list(   g_sc = set_units(0.1, mol/m^2/s),   g_uc = set_units(0, mol/m^2/s),   k_mc = set_units(0, 1),   k_sc = set_units(0, 1),   k_uc = set_units(0, 1)   ),   use_tealeaves = FALSE)      ep = make_enviropar(replace = list(    wind = set_units(Inf, m/s)  ), use_tealeaves = FALSE)   bp = make_bakepar()  cs = make_constants(use_tealeaves = FALSE)    chamber_pars = data.frame(    flow = set_units(600, umol / s),    leaf_area = set_units(6, cm ^ 2),    sigma_CO2_s = 0.1,    sigma_CO2_r = 0.1,    sigma_H2O_s = 0.1,    sigma_H2O_r = 0.1  )     ph = photosynthesis(lp, ep, bp, cs, use_tealeaves = FALSE, quiet = TRUE) |>   simulate_error(chamber_pars, n = 1L)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/t_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Temperature response functions — t_response_arrhenius","title":"Temperature response functions — t_response_arrhenius","text":"Temperature response functions","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/t_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temperature response functions — t_response_arrhenius","text":"","code":"t_response_arrhenius(T_leaf, Ea)  t_response_arrhenius_kruse(dEa, Ea_ref, Par_ref, T2)  t_response_arrhenius_medlyn(T_leaf, Ea, Hd, dS)  t_response_arrhenius_topt(T_leaf, Ea, Hd, Topt)  t_response_calc_dS(Ea, Hd, Topt)  t_response_calc_topt(Hd, dS, Ea)  t_response_heskel(T_leaf, a, b, c)  t_response_mmrt(dCp, dG, dH, T_leaf)"},{"path":"https://github.com/cdmuir/photosynthesis/reference/t_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temperature response functions — t_response_arrhenius","text":"T_leaf Leaf temperature K Ea Activation energy J mol-1 (Medlyn et al. 2002) dEa Temperature-dependent change Ea K^2 (Kruse et al. 2008) Ea_ref Activation energy J mol-1 (Kruse et al. 2008) Par_ref Parameter reference temperature 25 Celsius (Kruse et al. 2008) T2 Leaf temperature term (Kruse et al. 2008) Hd Deactivation energy J mol-1 (Medlyn et al. 2002) dS Entropy parameter J mol-1 (Medlyn et al. 2002) Topt Optimum temperature process K (Medlyn et al. 2002) Constant minimize residuals (Heskel et al. 2016) b Linear coefficient minimize residuals (Heskel et al. 2016) c Quadratic coefficient minimize residuals (Heskel et al. 2016) dCp Change heat capacity enzyme enzyme-substrate #' enzyme-transition states J mol-1 K-1 (Hobbs et al. 2013) dG Change Gibbs free energy reaction 25 C J mol-1 (Hobbs et al. 2013) dH Change enthalpy reaction 25 C J mol-1 (Hobbs et al. 2013)","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/t_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temperature response functions — t_response_arrhenius","text":"t_response_arrhenius calculates rate process based Arrhenius-type curve t_response_arrhenius_kruse fits peaked Arrhenius response according Kruse et al. 2008. t_response_arrhenius_medlyn peaked Arrhenius response found Medlyn et al. 2002. t_response_arrhenius_topt peaked Arrhenius temperature response function. t_response_calc_dS calculates dS fitted Topt model. t_response_calc_topt calculates Topt process Arrhenius parameters. t_response_heskel quadratic temperature response according Heskel et al. 2016. t_response_mmrt macromolecular rate theory temperature response according Hobbs et al. 2013.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/reference/t_functions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Temperature response functions — t_response_arrhenius","text":"Arrhenius S. 1915. Quantitative laws biological chemistry. Bell. Heskel et al. 2016. Convergence temperature response leaf respiration across biomes plant functional types. PNAS 113:3832-3837 Hobbs et al. 2013. Change heat capacity enzyme catalysis determines temperature dependence enzyme catalyzed rates. ACS Chemical Biology 8:2388-2393 Kruse J, Adams MA. 2008. Three parameters comprehensively describe temperature response respiratory oxygen reduction. Plant Cell Environ 31:954-967 Medlyn , Dreyer E, Ellsworth D, Forstreuter M, Harley PC, Kirschbaum MUF, Le Roux X, Montpied P, Strassemeyer J, Walcroft , Wang K, Loutstau D. 2002. Temperature response parameters biochemically based model photosynthesis. II. review experimental data. Plant Cell Environ 25:1167-1179","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-215","dir":"Changelog","previous_headings":"","what":"photosynthesis 2.1.5","title":"photosynthesis 2.1.5","text":"Added photoinhibition() light response models. allows users estimate photoinhibitation high light.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-214","dir":"Changelog","previous_headings":"","what":"photosynthesis 2.1.4","title":"photosynthesis 2.1.4","text":"CRAN release: 2023-08-15 Removed imports unexported tealeaves functions using ::: operator read_licor() removes lines parameter settings changed logging","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-213","dir":"Changelog","previous_headings":"","what":"photosynthesis 2.1.3","title":"photosynthesis 2.1.3","text":"CRAN release: 2023-05-11 Added example LI6800 data set (inst/extdata/li6800_example) unit testing read_licor() Soft-deprecated read_li6800() favor read_licor() Soft-deprecated fit_many() favor generic methods like purrr::map()","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-212","dir":"Changelog","previous_headings":"","what":"photosynthesis 2.1.2","title":"photosynthesis 2.1.2","text":"CRAN release: 2023-03-31 Updated CITATION using bibentry() instead citEntry() Resolved purrr deprecations removed expect_no_condition() unit tests resolved issue #12 Replaced dplyr::progress_estimated() progress::progress_bar() Fixed error photo(..., use_tealeaves = TRUE). User-defined changes stomatal conductance ratio passed tealeaves. Added evaporation (E) photo() photosynthesis() output use_tealeaves = TRUE Fixed issue lifecycle badges Added new function simulate_error() simulate measurement error gas exchange measurements.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-211","dir":"Changelog","previous_headings":"","what":"photosynthesis 2.1.1","title":"photosynthesis 2.1.1","text":"CRAN release: 2022-11-19 Added Bayesian options fit light-response light respiration models via fit_photosynthesis(..., .method = \"brms\") Preferred method fitting data models fit_photosynthesis() performs checks manipulations prior passing arguments various fit_ functions. Deprecated fit_r_light_kok(), fit_r_light_WalkerOrt(), fit_r_light_yin() favor fit_r_light2(). new function uses non-standard evaluation replace variable names dplyr::rename(). also extend functionality enable Bayesian fitting using brms output plot. Added Bayesian fitting method fit_aq_response2() using brms package. Deprecated fit_aq_response() favor fit_aq_response2(). new function uses non-standard evaluation replace variable names dplyr::rename(). also extend functionality enable Bayesian fitting using brms output plot. Fixed bug setting upper bound search find_A() Addressed warnings deprecated arguments tidyselect ggplot2 Added C_i (intercellular CO2 concentration) output photo() photosynthesis()","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-210","dir":"Changelog","previous_headings":"","what":"photosynthesis 2.1.0","title":"photosynthesis 2.1.0","text":"CRAN release: 2022-11-08 Commented examples took long time run Added progress option fit_many() toggle progress bar removed large files help subdirectory Divided large vignette smaller vignettes removed figures reduce file size Updated CITATION new vignette C3 photosynthesis modeling recommendations (modeling-recommendations) hood, many changes photosynthesis(), performance Changed default C_air 41 Pa 420 umol/mol Changed default O 21.27565 kPa 0.21 mol/mol Added optional feature calculate mesophyll conductance CO2 (g_mc) sum internal airspace (g_iasc) liquid-phase (g_liqc) conductances. avoid redundancy, photo_parameters single source truth input parameters photo() photosynthesis(). Fixed error gc2gw() gw2gc() migrated gunit version 1.0.2. Legacy version used version still air boundary layer conductance conversions. corrected version includes modification laminar flow boundary layer. Legacy version can obtained option use_legacy_version = TRUE. Changed default conductance units [umol / m ^ 2 / s / Pa] [mol / m ^ 2 / s] Changed <- = many instances Changed %>% |> many instances","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-203","dir":"Changelog","previous_headings":"","what":"photosynthesis 2.0.3","title":"photosynthesis 2.0.3","text":"CRAN release: 2022-08-12 DESCRIPTION file, rewrote references form authors (year) <doi:…> DESCRIPTION file, added () behind function names Added .Rd files regarding exported methods bake.Rd, bake_par.Rd, constants.Rd, enviro_par.Rd, leaf_par.Rd, parameter_names.Rd Changed print() stop() message() R/compile_data.R; R/fit_gs_model.R; R/fit_t_response.R; R/print_graphs.R R/print_graphs.R, added code restore users’ option par()$mfrow Removed “2020” field COPYRIGHT HOLDER LICENCE file Updated link Prometheus protocols vignette Stopped evaluating parallel example vignette Fixed tests failed update dependency units 0.8-0. (#7)","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-201","dir":"Changelog","previous_headings":"","what":"photosynthesis 2.0.1","title":"photosynthesis 2.0.1","text":"CRAN release: 2021-07-01 temp_resp1 temp_resp2, corrected reference. (#6)","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-200","dir":"Changelog","previous_headings":"","what":"photosynthesis 2.0.0","title":"photosynthesis 2.0.0","text":"CRAN release: 2020-09-12 Added analytical tools plant ecophysiology, including fitting stomatal conductance models, photosynthetic responses light, CO2, temperature, light respiration, well tools performing sensitivity analyses. Added tests new functions. Added new vignette include examples new analytical functions.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-102","dir":"Changelog","previous_headings":"","what":"photosynthesis 1.0.2","title":"photosynthesis 1.0.2","text":"CRAN release: 2020-07-01 Fixed bug crossing parameters photosynthesis() introduced use_tealeaves = TRUE changes tealeaves package. led crossing parameter values unique values calculated T_sky, incorrect. Added unit tests ensuring crossing done correctly tests/test-photosynthesis-crossing.R Fixed bug photosynthesis() caused new version dplyr. enviro_par(), “sky” temperature (T_sky) can now provided directly values (K) function (default). parallel = TRUE photosynthesis(), future uses plan(\"multisession\") rather plan(\"multiprocess\"). Added full URL CONDUCT.md README Fixed cross-references .Rd files","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-101","dir":"Changelog","previous_headings":"","what":"photosynthesis 1.0.1","title":"photosynthesis 1.0.1","text":"Release archived revision “amphistomy adaptation high light? Optimality models stomatal traits along light gradients.” Blog post.","code":""},{"path":"https://github.com/cdmuir/photosynthesis/news/index.html","id":"photosynthesis-100","dir":"Changelog","previous_headings":"","what":"photosynthesis 1.0.0","title":"photosynthesis 1.0.0","text":"CRAN release: 2019-05-09 Description: Simulate C3_3 photosynthesis using Farquhar, von Caemmerer, Berry (1980) model described Buckley Diaz-Espejo (2015). uses units ensure parameters properly specified transformed calculations. Temperature response functions get automatically “baked” parameters based leaf temperature following Bernacchi et al. (2002). package includes boundary layer, cuticular, stomatal, mesophyll conductances CO2_2, can vary upper lower portions leaf. Use straightforward functions simulate photosynthesis environmental gradients Photosynthetic Photon Flux Density (PPFD) leaf temperature, trait gradients CO2_2 conductance photochemistry. Added NEWS.md file track changes package.","code":""}]
